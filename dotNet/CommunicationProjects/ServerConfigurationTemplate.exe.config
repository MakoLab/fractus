<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <!-- required -->
    <section name="service" type="Makolab.Fractus.Communication.ServiceSectionHandler, HostingService"	/>
    <section name="modules" type="Makolab.Fractus.Communication.ModulesSectionHandler, HostingService"	/>
    <section name="messageHandler" type="Makolab.Fractus.Communication.MessageHandlerSectionHandler, TransmittingModule"	/>
    <!-- client specific -->
    <section name="databaseConnectors" type="Makolab.Fractus.Communication.DatabaseConnector.DatabaseConnectorsSectionHandler, CommunicationModule"	/>
    <section name="transmitters" type="Makolab.Fractus.Communication.Transmitter.TransmittersSectionHandler, CommunicationModule" />
    <section name="executors" type="Makolab.Fractus.Communication.Executor.ExecutorsSectionHandler, CommunicationModule" />
    <section name="dependencyContainers" type="Makolab.Fractus.Commons.DependencyInjection.ContainerSectionHandler, Commons" />
    <section name="fractusKernel" type="Makolab.Fractus.Kernel.FractusKernelSectionHandler, Kernel"/>
	<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <service Name="${SERVICE_NAME}" ModuleUnloadTimeout="10000" Description="Fractus 2 communication service." />
  <modules>
    <module name="communication" type="Makolab.Fractus.Communication.TransmittingModuleHost, TransmittingModule" />
	<module name="communicationMod" type="Makolab.Fractus.Communication.CommunicationController, CommunicationModule" />
  </modules>
  <appSettings>
    <add key="EnablePackageValidation" value="true"/>
  </appSettings>
  <messageHandler SynchronizationHandler="Makolab.Fractus.Communication.Transmitter.ServiceMessageHandler, CommunicationModule" />
  <transmitters>
    <transmitter Autostart="true" Name="Transmitter" SendInterval="3000" ReceiveInterval="3000" EnableSender="true" EnableReceiver="true" EnableStatistics="false" UpdateStatisticsIntervalInSec="30" >
      <internalDependencies>
        <dependency Name="Database" Object="fraktusek2" />
      </internalDependencies>
    </transmitter>
  </transmitters>    
  <executors>
    <executor Name="Executor" Autostart="true" ExecutionInterval="3000" MaxTransactionCount="10" UseCustomPackageExecutor="false" >
      <internalDependencies>
        <dependency Name="Database" Object="fraktusek2_EXEC" />
        <dependency Name="Transmitter" Object="Transmitter" />
      </internalDependencies>
    </executor>
  </executors>     
  <databaseConnectors>
    <databaseConnector Name="fraktusek2" ConnectionString="Data Source=${SQL_SERVER};${SQL_AUTHENTICATION};database=${DB_NAME};Application Name=FractusCommunication" />
    <databaseConnector Name="fraktusek2_EXEC" ConnectionString="Data Source=${SQL_SERVER};${SQL_AUTHENTICATION};database=${DB_NAME};Application Name=FractusCommunication" BlockConnection="false" />
  </databaseConnectors>
  <dependencyContainers>
    <container name="CommunicationContainer" type="Makolab.Fractus.Communication.FractusContainerProvider, FractusDependencyConfiguration" />
    <container type="Makolab.Fractus.Kernel.DependencyInjection.KernelContainerProvider, Kernel" name="KernelContainer"/>
    <binding assembly="CommunicationModule" container="CommunicationContainer" />
	<binding assembly="FractusCommunication" container="CommunicationContainer" />
  </dependencyContainers>
  <connectionStrings>
    <add name="Main" connectionString="Server=${SQL_SERVER};database=${DB_NAME};${SQL_AUTHENTICATION};Application Name=FractusCommunication" providerName="System.Data.SqlClient" />
  </connectionStrings>
  <fractusKernel>
    <session timeout="0" />
    <transaction forceRollback="false" />
    <database logCommunication="false" logPath=".\DBLog.xml" />
  </fractusKernel>  
  <system.web>
    <compilation debug="true" />
  </system.web>
  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior name="debuggingBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceMetadata httpGetEnabled="true" />
          <serviceThrottling maxConcurrentCalls="16" />
        </behavior>
        <behavior name="serverDebuggingBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceMetadata httpGetEnabled="true" />
          <serviceThrottling maxConcurrentCalls="16" />
          <serviceCredentials>
            <clientCertificate>
              <authentication certificateValidationMode="PeerTrust"/>
            </clientCertificate>
            <serviceCertificate findValue="CommunicationService" x509FindType="FindBySubjectName" storeLocation="LocalMachine" storeName="My"/>
          </serviceCredentials>		  
        </behavior>
        <behavior name="serverReleaseBehavior">
          <serviceDebug includeExceptionDetailInFaults="false" />
          <serviceMetadata httpGetEnabled="false" />
          <serviceThrottling maxConcurrentCalls="16" />
          <serviceCredentials>
            <clientCertificate>
              <authentication certificateValidationMode="PeerTrust"/>
            </clientCertificate>
            <serviceCertificate findValue="CommunicationService" x509FindType="FindBySubjectName" storeLocation="LocalMachine" storeName="My"/>
          </serviceCredentials>		  
        </behavior>			
        <!--  object fetcher server behavior -->
        <behavior name="DiagnosticBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceMetadata />
        </behavior>		
      </serviceBehaviors>
		<endpointBehaviors>
		  <behavior name="clientBehavior">
			<clientCredentials>
			  <clientCertificate findValue="CommunicationClient" x509FindType="FindBySubjectName" storeLocation="LocalMachine" storeName="My"/>
			  <serviceCertificate>
				<authentication certificateValidationMode="PeerTrust"/>
			  </serviceCertificate>
			</clientCredentials>
		  </behavior>
		</endpointBehaviors>	  
    </behaviors>
    <bindings>
      <customBinding>
        <binding name="Soap11noaddressing">
          <textMessageEncoding messageVersion="Soap11">
            <readerQuotas
				maxStringContentLength="50000000"
				maxArrayLength="50000000"
				maxBytesPerRead="4096"
			/>
          </textMessageEncoding>
          <httpTransport />
        </binding>
      </customBinding>
      <basicHttpBinding>
        <binding name="basicHttp" closeTimeout="00:01:00" openTimeout="00:01:00"
          receiveTimeout="00:10:00" sendTimeout="00:01:00" allowCookies="false"
          bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard"
          maxBufferSize="50000000" maxBufferPoolSize="524288" maxReceivedMessageSize="50000000"
          messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered"
          useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="50000000" maxArrayLength="50000000"
            maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm="" />
            <message clientCredentialType="UserName" algorithmSuite="Default" />
          </security>
        </binding>
      </basicHttpBinding>
      <wsHttpBinding>
        <binding name="serverWsHttpBinding" maxReceivedMessageSize="50000000" >
			<security mode="Message">
				<message clientCredentialType="Certificate"/>
			</security>
			<readerQuotas maxStringContentLength="50000000" maxArrayLength="50000000" maxBytesPerRead="4096" />
        </binding>
		<binding name="clientWsHttpBinding" closeTimeout="00:01:00"
			openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00"
			bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard"
			maxBufferPoolSize="524288" maxReceivedMessageSize="50000000"
			messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true"
			allowCookies="false">
			<readerQuotas maxDepth="32" maxStringContentLength="50000000" maxArrayLength="50000000"
				maxBytesPerRead="4096" maxNameTableCharCount="16384" />
			<!-- <reliableSession ordered="true" inactivityTimeout="00:10:00" enabled="false" /> -->
			<security mode="Message">
				<message clientCredentialType="Certificate" />
			</security>
		</binding>		
      </wsHttpBinding>      	  
    </bindings>
    <services>
      <service behaviorConfiguration="serverDebuggingBehavior" name="Makolab.Fractus.Communication.SynchronizationService">
        <endpoint
          address="SynchronizationService"
          binding="wsHttpBinding"
          bindingConfiguration="serverWsHttpBinding"
          name="basicHttp"
          contract="Makolab.Fractus.Communication.ISynchronizationService"
        />
        <endpoint
          contract="IMetadataExchange"
          binding="mexHttpBinding"
          address="mex"
		/>
        <host>
          <baseAddresses>
            <add baseAddress="${COMMUNICATION_SERVICE_URL}" />
          </baseAddresses>
        </host>
      </service>
      <!-- object fetcher server -->
      <service name="Makolab.Fractus.Communication.DiagnosticService" behaviorConfiguration="DiagnosticBehavior" >
        <endpoint address="net.pipe://localhost/${SERVICE_NAME}DiagnosticService" binding="netNamedPipeBinding" contract="Makolab.Fractus.Communication.IDiagnosticService" />
        <endpoint address="net.pipe://localhost/${SERVICE_NAME}DiagnosticService/mex" binding="mexNamedPipeBinding" contract="IMetadataExchange" />
      </service>	  
    </services>
	<!-- communication client for communication server (a loopback) -->
	<client>
	  <endpoint address="${COMMUNICATION_SERVICE_URL}/SynchronizationService"
		binding="wsHttpBinding" bindingConfiguration="clientWsHttpBinding"
		behaviorConfiguration="clientBehavior"
		contract="Makolab.Fractus.Communication.ISynchronizationService"
		name="communicationService" >
		<identity>
			<dns value="CommunicationService" />
		</identity>
	  </endpoint>			
	</client> 	  	
  </system.serviceModel>
  <log4net>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="servicelog.txt" />
      <appendToFile value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <rollingStyle value="Size" />
      <maxSizeRollBackups value="1" />
      <maximumFileSize value="10MB" />
      <staticLogFileName value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%property{RequestId}] %-5level - %message [%property{source} - %property{sourceParams}] %exception%newline" />
      </layout>
    </appender>    
    <root>
      <level value="INFO" />
      <appender-ref ref="RollingFileAppender" />
    </root>
  </log4net>  
</configuration>