using System;
using System.Collections.Generic;
using System.Xml.Linq;
using Makolab.Fractus.Commons;
using Makolab.Fractus.Kernel.Attributes;
using Makolab.Fractus.Kernel.Enums;
using Makolab.Fractus.Kernel.Exceptions;
using Makolab.Fractus.Kernel.Managers;

namespace Makolab.Fractus.Kernel.BusinessObjects.Finances
{
    [XmlSerializable(XmlField = "settlement")]
    [DatabaseMapping(TableName = "paymentSettlement")]
    internal class PaymentSettlement : BusinessObject
    {
        [XmlSerializable(XmlField = "date")]
        [Comparable]
        [DatabaseMapping(ColumnName = "date")]
        public DateTime Date { get; set; }

        [XmlSerializable(XmlField = "amount")]
        [Comparable]
        [DatabaseMapping(ColumnName = "amount")]
        public decimal Amount { get; set; }

        [XmlSerializable(XmlField = "relatedPayment", RelatedObjectType = BusinessObjectType.Payment)]
        [Comparable]
        public Payment RelatedPayment { get; set; }

        [XmlSerializable(XmlField = "isAutoGenerated")]
        [Comparable]
        [DatabaseMapping(ColumnName = "isAutoGenerated")]
        public bool IsAutoGenerated { get; set; }

        public PaymentSettlement(BusinessObject parent)
            : base(parent, BusinessObjectType.PaymentSettlement)
        {
            this.Date = SessionManager.VolatileElements.CurrentDateTime;
        }

        /// <summary>
        /// Validates the object's consistency. Checks whether the object has all necessary xml nodes.
        /// </summary>
        public override void ValidateConsistency()
        {
            if (this.Date == DateTime.MinValue)
                throw new ClientException(ClientExceptionId.FieldValidationError, null, "fieldName:date");

            if (this.RelatedPayment == null)
                throw new ClientException(ClientExceptionId.FieldValidationError, null, "fieldName:relatedPayment");

            if (this.Amount <= 0)
                throw new ClientException(ClientExceptionId.ZeroPaymentSettlementException);
        }

        /// <summary>
        /// Saves changes of current <see cref="BusinessObject"/> to the operations list.
        /// </summary>
        /// <param name="document">Xml document containing operation list to execute.</param>
        public override void SaveChanges(XDocument document)
        {
            if (this.Id == null)
                this.GenerateId();

            if (this.Status != BusinessObjectStatus.Unchanged && this.Status != BusinessObjectStatus.Unknown)
            {
                Dictionary<string, object> forcedToSave = new Dictionary<string, object>();

                Payment parent = (Payment)this.Parent;

                if (parent.Direction * parent.Amount > 0)
                {
                    forcedToSave.Add("incomePaymentId", this.Parent.Id.ToUpperString());
                    forcedToSave.Add("outcomePaymentId", this.RelatedPayment.Id.ToUpperString());
                }
                else
                {
                    forcedToSave.Add("outcomePaymentId", this.Parent.Id.ToUpperString());
                    forcedToSave.Add("incomePaymentId", this.RelatedPayment.Id.ToUpperString());
                }

                BusinessObjectHelper.SaveBusinessObjectChanges(this, document, forcedToSave, null);
            }
        }
    }
}
