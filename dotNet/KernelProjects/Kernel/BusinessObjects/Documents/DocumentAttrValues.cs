using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using Makolab.Fractus.Kernel.BusinessObjects.Dictionaries;
using Makolab.Fractus.Kernel.Enums;
using Makolab.Fractus.Kernel.Exceptions;
using Makolab.Fractus.Kernel.Mappers;

namespace Makolab.Fractus.Kernel.BusinessObjects.Documents
{
    /// <summary>
    /// Class that manages document's attributes.
    /// </summary>
    internal class DocumentAttrValues : BusinessObjectsContainer<DocumentAttrValue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAttrValues"/> class with a specified <see cref="Document"/> to attach to.
        /// </summary>
        /// <param name="parent"><see cref="Document"/> to attach to.</param>
        public DocumentAttrValues(Document parent)
            : base(parent, "attribute")
        {
        }

        public DocumentAttrValue this[DocumentFieldName fieldName]
        {
            get
            {
                return this.Children.Where(a => a.DocumentFieldName == fieldName).FirstOrDefault();
            }
        }

        /// <summary>
        /// Creates new <see cref="DocumentAttrValue"/> according to the document's defaults and attaches it to the parent <see cref="Document"/>.
        /// </summary>
        /// <returns>A new <see cref="DocumentAttrValue"/>.</returns>
        public override DocumentAttrValue CreateNew()
        {
            //create new DocumentAttrValue object and attach it to the element
            DocumentAttrValue attribute = new DocumentAttrValue((Document)this.Parent);

            attribute.Order = this.Children.Count + 1;

            //add the attribute to the attributes collection
            this.Children.Add(attribute);

            return attribute;
        }

        public DocumentAttrValue CreateNew(DocumentFieldName fieldName)
        {
            var attr = this.CreateNew();
            attr.DocumentFieldName = fieldName;
            return attr;
        }

		public DocumentAttrValue CreateNew(DocumentFieldName fieldName, bool disableAutomaticRemoval)
		{
			var attr = this.CreateNew();
			attr.DocumentFieldName = fieldName;
			attr.Automatic = disableAutomaticRemoval;
			return attr;
		}

		public DocumentAttrValue GetOrCreateNew(DocumentFieldName fieldName)
		{
			DocumentAttrValue result = this[fieldName];

			if (result == null)
			{
				result = this.CreateNew(fieldName);
			}

			return result;
		}

		public DocumentAttrValue GetOrCreateNew(DocumentFieldName fieldName, bool autoGeneratedAttribute)
		{
			var attr = this.GetOrCreateNew(fieldName);
			attr.Automatic = autoGeneratedAttribute;
			return attr;
		}

        /// <summary>
        /// Validates the collection.
        /// </summary>
        public override void Validate()
        {
            //check for forbidden document featues
            foreach (DocumentAttrValue attribute in this.Children)
            {
                DocumentField df = DictionaryMapper.Instance.GetDocumentField(attribute.DocumentFieldId);
                
                if (df.Name.StartsWith("DocumentFeature_", StringComparison.Ordinal))
                {
                    DocumentType dt = DictionaryMapper.Instance.GetDocumentType(((Document)this.Parent).DocumentTypeId);

                    bool exists = false;

                    IEnumerable<XElement> allowedDocumentFeatures = null;

                    if (this.Parent.BOType == BusinessObjectType.CommercialDocument)
                        allowedDocumentFeatures = dt.CommercialDocumentOptions.DocumentFeatures.Elements();
                    else if (this.Parent.BOType == BusinessObjectType.WarehouseDocument)
                        allowedDocumentFeatures = dt.WarehouseDocumentOptions.DocumentFeatures.Elements();
                    else if (this.Parent.BOType == BusinessObjectType.FinancialDocument)
                        allowedDocumentFeatures = dt.FinancialDocumentOptions.DocumentFeatures.Elements();

                    if (allowedDocumentFeatures != null)
                    {
                        foreach (XElement id in allowedDocumentFeatures)
                        {
                            if (attribute.DocumentFieldId == new Guid(id.Value))
                            {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists)
                        {
                            string featureName = BusinessObjectHelper.GetBusinessObjectLabelInUserLanguage(DictionaryMapper.Instance.GetDocumentField(attribute.DocumentFieldId)).Value;
                            throw new ClientException(ClientExceptionId.DocumentFeatureForbidden, null, "documentFeatureName:" + featureName);
                        }
                    }
                }

                var count = this.Children.Where(c => c.DocumentFieldId == attribute.DocumentFieldId && c != attribute).Count();

                if (count > 0)
                {
                    var field = DictionaryMapper.Instance.GetDocumentField(attribute.DocumentFieldId);

                    if (field.Metadata.Element("allowMultiple") == null)
                        throw new ClientException(ClientExceptionId.SingleAttributeMultipled, null, "name:" + BusinessObjectHelper.GetBusinessObjectLabelInUserLanguage(field).Value);
                }
            }

            base.Validate();
        }
    }
}
