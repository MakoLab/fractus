<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:lineList="com.makolab.components.lineList.*" 
	xmlns:inputComponents="com.makolab.components.inputComponents.*" 
	width="100%"
	>
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
		[Event(name="paymentChange", type="com.makolab.components.document.DocumentEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.makolab.components.document.DocumentEvent;
			import com.makolab.components.util.CurrencyManager;
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.model.document.DocumentObject;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			import com.makolab.fractus.view.catalogue.AvailableStockRenderer;
			
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.ListEvent;	
			
			public var dictionaryManager:DictionaryManager = DictionaryManager.getInstance();
			[Bindable] public var editMode:Number = 0;
			[Bindable] private var enable:Boolean = true;
			[Bindable] private var totalAmount:Number = 0;
			[Bindable] private var currencySymbol:String = "";
			
			private var _documentObject:DocumentObject;
			
			[Bindable] public var availablePaymentMethods:XMLList = new XMLList(); 
			
			[Bindable]
			public function set documentObject(value:DocumentObject):void
			{
				_documentObject = value;
				
				_documentObject.addEventListener(DocumentEvent.DOCUMENT_PAYMENT_CHANGE,handlePaymentChange);
				_documentObject.addEventListener(DocumentEvent.DOCUMENT_FIELD_CHANGE,handlePaymentChange);
				
				var currencies:XMLList = dictionaryManager.dictionaries.currency.(id.toString() == documentObject.xml.documentCurrencyId);
				if(currencies.length() > 0)currencySymbol = currencies[0].symbol.toString();
				else currencySymbol = DictionaryManager.getInstance().getById(ModelLocator.getInstance().systemCurrencyId).symbol.toString();
				
				//dostępne metody płatności
				availablePaymentMethods = new XMLList();
				var documentTypes:XMLList = dictionaryManager.dictionaries.documentTypes.(valueOf().id == String(_documentObject.typeDescriptor.typeId));
				if(documentTypes.length() > 0){
					for each (var paymentId:XML in documentTypes.xmlOptions.root.commercialDocument.paymentMethods.id){
						var paymentMethod:XMLList = dictionaryManager.dictionaries.paymentMethod.(id.toString() == paymentId.*);
						if(paymentMethod.length() > 0){
							availablePaymentMethods = availablePaymentMethods + paymentMethod[0];
						}
					}
				}
				
				availablePaymentMethods = sortXMLList(availablePaymentMethods, 'order', Array.NUMERIC);
				
				//wyszarzenie kontrolki jesli otwieramy do edycji i jest więcej niż 1 płatnosc.
				this.hBox.enabled = (documentObject.paymentsXML.payment.length() == 1);
				this.info.text = (documentObject.paymentsXML.payment.length() == 1) ? "" : LanguageManager.getInstance().labels.documents.paymentsNote;
				//ukrycie kontrolki jesli nie ma zadnej platnosci
				this.visible = (documentObject.paymentsXML.payment.length() > 0);
				this.includeInLayout = this.visible;
				//przeliczenie wartości do zapłaty
				calculateTotalAmount();
				calculateValueInSystemCurrency();
				
				if(_documentObject)setDueDateControlsEnabled();
			}
			
			public function get documentObject():DocumentObject
			{
				return this._documentObject;
			}
			
			[Bindable] private var documentValueInSystemCurrency:String = "";
			//[Bindable] private var documentValueInDocumentCurrency:Number = NaN;
			
			private function calculateValueInSystemCurrency():void
			{
				if (!documentObject) return;
				if ( documentObject.xml.documentCurrencyId.toString() == ModelLocator.getInstance().systemCurrencyId )
				{
					documentValueInSystemCurrency = "";
					//documentValueInDocumentCurrency = Number(documentObject.totalForPayment);
				}else{
					documentValueInSystemCurrency = CurrencyManager.formatCurrency(documentObject.totalForPayment * Number(documentObject.xml.exchangeRate) / Number(documentObject.xml.exchangeScale) ) + " " + dictionaryManager.dictionaries.currency.(id.toString() == ModelLocator.getInstance().systemCurrencyId).symbol.toString();
					//documentValueInDocumentCurrency = Number(documentObject.totalForPayment) * Number(documentObject.xml.exchangeScale) / Number(documentObject.xml.exchangeRate);
				}
			}
			
			
			private function calculateTotalAmount():void
			{
				totalAmount = 0;
				var pm:XML;
				for each(var payment:XML in _documentObject.paymentsXML.payment)	{
					pm = DictionaryManager.getInstance().getById(payment.paymentMethodId.toString());
					if(pm && !(pm.isIncrementingDueAmount.toString() == "1")){
						totalAmount += CurrencyManager.paymentToDocument(payment,documentObject);// Number(payment.amount.toString());		
					}
				}
			}
			
			private function handlePaymentChange(event:DocumentEvent):void
			{
				/* var cashPayments:XMLList = new XMLList();
				var paymentMethod:String = DictionaryManager.getInstance().dictionaries.paymentMethod.(isGeneratingCashierDocument.toString() == "1").id.toString();
				for each (var payment:XML in documentObject.paymentsXML.payment){
					if(payment.paymentMethodId.toString() == paymentMethod && String(payment.dueDays) != "" && payment.dueDays.toString() == "0"){
						cashPayments = cashPayments + payment;
					}
				} */
				this.calculateTotalAmount();
				this.hBox.enabled = (documentObject.paymentsXML.payment.length() == 1);
				this.info.text = (documentObject.paymentsXML.payment.length() == 1) ? "" : LanguageManager.getInstance().labels.documents.paymentsNote;
				
				this.visible = (documentObject.paymentsXML.payment.length() > 0);
				this.includeInLayout = this.visible;
				this.currencySymbol = DictionaryManager.getInstance().getById(documentObject.xml.documentCurrencyId).symbol.toString();
				
				setDueDateControlsEnabled();
				if (event.fieldName == "currency" || event.fieldName == "totalForPayment") calculateValueInSystemCurrency();
			}
			
			private function handleDocumentFiledChange(event:DocumentEvent):void
			{
				if(event.fieldName == "totalForPayment")this.calculateTotalAmount();
			}
			
			private function handlePaymentMethodChange(event:Event):void
			{
				if(documentObject.paymentsXML.payment.length() > 0){
					documentObject.paymentsXML.payment[0].paymentMethodId = event.target.dataObject;
					documentObject.dispatchEvent(new DocumentEvent(DocumentEvent.DOCUMENT_PAYMENT_CHANGE,false,false,"paymentMethod",documentObject.paymentsXML.payment[0]));
				}
			}
			
			private function handleDueDateChange(event:Event):void
			{
				if(documentObject.paymentsXML.payment.length() > 0){
					documentObject.paymentsXML.payment[0].dueDate = event.target.dataObject;
					documentObject.dispatchEvent(new DocumentEvent(DocumentEvent.DOCUMENT_PAYMENT_CHANGE,false,false,"dueDate",documentObject.paymentsXML.payment[0]));
				}
			}
			
			private function handleDueDaysChange(event:Event):void
			{
				if(documentObject.paymentsXML.payment.length() > 0){
					documentObject.paymentsXML.payment[0].dueDays = event.target.text;
					documentObject.dispatchEvent(new DocumentEvent(DocumentEvent.DOCUMENT_PAYMENT_CHANGE,false,false,"dueDays",documentObject.paymentsXML.payment[0]));
				}
			}
			
			private function setDueDateControlsEnabled():void
			{
				var allowEdit:Boolean = false;
				if(documentObject.paymentsXML.payment.length() == 1)
					var paymentMethod:XML = DictionaryManager.getInstance().getById(documentObject.paymentsXML.payment[0].paymentMethodId.toString());
				if(documentObject.paymentsXML.payment.length() == 1 && paymentMethod && (paymentMethod.dueDateChange.toString() == "1")  )
				{
					dueDaysEditor.enabled = true;
					dueDateEditor.enabled = true;
				}else{
					dueDaysEditor.enabled = false;
					dueDateEditor.enabled = false;
				}
			}
			
			private function sortXMLList(list:XMLList, fieldName:Object, options:Object = null):XMLList {
				var arr:Array = new Array();
				var ch:XML;
				for each(ch in list) {
					arr.push(ch);
				}
			
				var resultArr:Array = fieldName==null ?
				options == null ? arr.sort() : arr.sort(options) : arr.sortOn(fieldName, options);
			
				var result:XMLList = new XMLList();
			
				for(var i:int=0; i<resultArr.length; i++) {
					result += resultArr[i];
				}
				return result;
			}
			public function lFunction(item:Object)
			{
				if(item.label.@lang.length())
					return item.label.(@lang==LanguageManager.getInstance().currentLanguage)[0];
				else
					return item.label;
			}
		]]>
	</mx:Script>
	<mx:HBox id="hBox" width="100%">
		<mx:Form textAlign="left" enabled="{documentObject.allowPaymentsEdit}" width="100%">
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.paymentMethod}: " width="100%">				
				<inputComponents:DictionarySelector
					id="paymentMethodSelector"
					dataProvider="{availablePaymentMethods}"
					dataObject="{documentObject.paymentsXML.payment[0].paymentMethodId}"
					change="handlePaymentMethodChange(event)"
					valueMapping="{{ id : '*' }}" 
					labelField="label" 
					listLabelField="label"
					width="100%"
					textAlign="left"
					labelFunction="lFunction"
					listLabelFunction="lFunction"
					/>
					
			</mx:FormItem>
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.dueDate}: " width="100%">
			
				<inputComponents:DateEditor
					id="dueDateEditor"
					dataObject="{documentObject.paymentsXML.payment[0].dueDate}"
					change="handleDueDateChange(event)"
					width="100%"
				/>
				
			</mx:FormItem>
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.dueDays}: " width="100%">
			
				<mx:TextInput
					id="dueDaysEditor"
					change="handleDueDaysChange(event)"
					text="{documentObject.paymentsXML.payment[0].dueDays}"
					restrict="0-9\-"
					width="100%"
				/>
				
			</mx:FormItem>
		</mx:Form>
		<mx:Form textAlign="left">
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.documentValue}: " direction="horizontal">
				<inputComponents:CurrencyRenderer id="crDocumentValue" value="{documentObject.totalForPayment}" nanText="0,00" fontWeight="bold" fontSize="15" width="100%" toolTip="{documentValueInSystemCurrency}"/>
				<mx:Label text="{currencySymbol}" fontWeight="bold" fontSize="15" toolTip="{documentValueInSystemCurrency}"/>
			</mx:FormItem>
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.received}: " direction="horizontal">
				<inputComponents:CurrencyRenderer value="{totalAmount}" nanText="0,00" width="100%"/>
				<mx:Label text="{currencySymbol}"/>
			</mx:FormItem>
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.dueAmount}: " direction="horizontal">
				<inputComponents:CurrencyRenderer value="{Number(documentObject.totalForPayment.toFixed(2))-Number(totalAmount.toFixed(2))}" nanText="0,00" width="100%"/>
				<mx:Label text="{currencySymbol}"/>
			</mx:FormItem>
		</mx:Form>
	</mx:HBox>
	<mx:Label id="info" color="red"/>
</mx:VBox>