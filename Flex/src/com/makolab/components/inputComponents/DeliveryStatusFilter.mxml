<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem implements="com.makolab.components.catalogue.ICatalogueFilter" 
	xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
	xmlns:inputComponents="com.makolab.components.inputComponents.*">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.catalogue.CatalogueFilterError;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.view.diagnostics.XmlCommunicatorQueueList;
			
			import mx.binding.utils.BindingUtils;
			private var _config:XML
			[Bindable]
			public var columnName:String = "undelivered";
			
			[Bindable]
			public var defaultStatuses:Array = [0, 1];
			
			public function get value():Object
			{
				//if(status.length == status.selectedItems.length)return "";
				var ret:Array = [];
				for(var i:int=0;i<status.selectedItems.length;i++){
					ret.push("" + status.selectedItems[i].value.* + "");
				}
				return ret.join(",");
			}
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if(status.selectedItems.length == 0)throw new CatalogueFilterError("Nie zaznaczono żadnego statusu dokumentu w filtrze statusów dokumentów");//todo use LanguageManager
				if(value.toString() != ""){
					if(!parameters.filters)parameters.filters = "";
					var filterNodes:XMLList = parameters.filters.column.(@field == columnName);
					if(status.selectedItems.length != status.length){
						if(filterNodes.length() == 0){
							var newCondition:XML = <column/>;
							newCondition.@field = columnName;
							newCondition.* = value;
							parameters.filters.columns += newCondition;
						}else{
							filterNodes[0].* = value;
						}
					}else{
						if(filterNodes.length() > 0){
							delete filterNodes[0];
						}
					}
				}
			}
			
			private function getSelectedItems():Array
			{
				
				var e1:XML=<entry>
  <id>
  </id>
  <name>
    All
  </name>
  <value>
    0
  </value>
  <label lang="pl">
    Wszystkie
  </label>
 <label lang="en">
	All
  </label>
  <version>
  </version>
</entry>

var e2:XML=<entry>
  <id>
  </id>
  <name>
    Undelivered
  </name>
  <value>
    1
  </value>
  <label lang="pl">
    Niewysłane
  </label>
  <version>
  </version>
</entry>
var items:Array = [e1,e2];
				return items;
			}
			
			private function setSelection():void
			{
				status.selectedItems = getSelectedItems();
			}
			
			private function comboLabelFunction(item:Object):String
			{
				var ret:String = item.label.(@lang == LanguageManager.getInstance().currentLanguage).*; 
				return ret;
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter value="60,20"/>
				*/
					var items:Array = [];
					var values:Array = String(value.@value).split(",");
					for each (var v:String in values){
						var objects:Object = status.dataProvider;
						for each(var o:Object in objects){
							if(o.value.* == v)
								items.push(o);
						}
					}
					status.selectedItems = items;
				}
			}
			
			public function clear():void{
				if(status.enabled)status.selectAll();
			}
			
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
			
		]]>
	</mx:Script>
		<inputComponents:CheckBoxCombo id="status" creationComplete="setSelection()" width="100%" labelFunction="comboLabelFunction">
			<inputComponents:dataProvider>
				{getSelectedItems()}
			</inputComponents:dataProvider>
		</inputComponents:CheckBoxCombo>
</mx:FormItem>
