<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" >
	<mx:Script>
		<![CDATA[
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.remoteInterface.Int;
			
			import mx.binding.utils.BindingUtils;
			private var _config:XML
			
			public function get value():Object
			{
				return availability.selectedItem.@value;
			}
			
			// decyduje o tym czy fitlrujemy wg dostepnosci mag biezacego czy wszystkich
			public var sum:Boolean = false;
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
				sum = Tools.parseBoolean(_config.@sum);
			}
			private function setIndex():void{
				for each (var value:XML in XMLList(_config)){
					var objects:Object = availability.dataProvider;
					for each(var o:Object in objects){
						if(o.@value == value.@value)
							availability.selectedItem = o;
					}
				}
			}
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if(value.toString() != ""){
					if(!parameters.filters)parameters.filters = "";
					var filterNodes:XMLList = parameters.filters.column.(@field == ((value == "1") ? "quantity" : "available"));
					if(filterNodes.length() == 0){
						var newCondition:XML = <column/>;
						if (sum) newCondition.@field = (value == "1") ? "availableSum" : "quantitySum";
						else newCondition.@field = (value == "1") ? "available" : "quantity";
						newCondition.* = 1;
						parameters.filters.columns += newCondition;
					}else{
						filterNodes[0].* = 1;
					}
				}
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter value="1"/>
				*/		
				var objects:Object = availability.dataProvider;
				for each(var o:Object in objects){
					if(o.@value == value.@value)
						availability.selectedItem = o;
				}
				}
			}
			
			public function clear():void{
				if(availability.enabled)availability.selectedIndex = 0;
			}
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
	<mx:ComboBox id="availability" width="100%" minWidth="50" labelField="@label" creationComplete="setIndex()">
		<mx:dataProvider>
			<mx:XMLList xmlns="">
        		<option label="{LanguageManager.getInstance().labels.common.allF}" value=""/>
				<option label="{LanguageManager.getInstance().labels.items.available}" value="1"/>
				<option label="{LanguageManager.getInstance().labels.items.positiveStock}" value="0"/>
			</mx:XMLList>
		</mx:dataProvider>
	</mx:ComboBox>
</mx:FormItem>
