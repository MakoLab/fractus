<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" creationComplete="updateProviders()">
	<mx:Script>
		<![CDATA[
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			
			import mx.binding.utils.BindingUtils;
			private var _config:XML
			[Bindable]
			public var companyColumnName:String = "companyId";
			[Bindable]
			public var branchColumnName:String = "branchId";
			
			public function get value():Object
			{
				return {company : companyCombo.selectedItem.id.*, branch : branchCombo.selectedItem.id.*};
			}
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				var newCondition:XML = <column/>;
				var filterNodes:XMLList = new XMLList();
				if(value.company.toString() != "" && value.branch.toString() == ""){
					if(!parameters.filters)parameters.filters = "";
					filterNodes = parameters.filters.column.(@field == companyColumnName);
					if(filterNodes.length() == 0){
						newCondition.@field = companyColumnName;
						newCondition.* = value.company;
						parameters.filters.column += newCondition;
					}else{
						filterNodes[0].* = value.company;
					}
				}
				if(value.branch.toString() != ""){
					if(!parameters.filters)parameters.filters = "";
					filterNodes = parameters.filters.column.(@field == branchColumnName);
					if(filterNodes.length() == 0){
						newCondition.@field = branchColumnName;
						newCondition.* = value.branch;
						parameters.filters.column += newCondition;
					}else{
						filterNodes[0].* = value.branch;
					}
				}
			}
			
			private function comboLabelFunction(item:Object):String
			{
				var ret:String = item.label.(@lang == LanguageManager.getInstance().currentLanguage).*; 
				return ret;
			}
			
			private function companyDataProvider():Object
			{
				var all:XML = <entry><id/><label/></entry>;
				all.label.@lang = LanguageManager.getInstance().currentLanguage;
				all.label.(@lang == LanguageManager.getInstance().currentLanguage).* = LanguageManager.getInstance().labels.common.allF;
				var dp:XMLList = all + DictionaryManager.getInstance().dictionaries.companies; 
				return dp;
			}
			
			private function branchDataProvider(company:String):Object
			{
				var all:XML = <entry><id/><label/></entry>;
				all.label.@lang = LanguageManager.getInstance().currentLanguage;
				all.label.(@lang == LanguageManager.getInstance().currentLanguage).* = LanguageManager.getInstance().labels.common.allF;
				var dp:XMLList = all + DictionaryManager.getInstance().dictionaries.branches.(companyId.* == companyId); 
				return dp;
			}
			
			/*
			private function enableBranchCombo(companyItem:Object):Boolean
			{
				if(companyItem.id == "")return false;
				else return true;
			}
			*/
			
			private function updateProviders():void
			{
				companyCombo.dataProvider = companyDataProvider();
				if(ModelLocator.getInstance().headquarters==false){
					for each (var item:XML in companyCombo.dataProvider) if (String(item.contractorId) == ModelLocator.getInstance().companyId)
					{
						companyCombo.selectedItem = item;
						break;
					}
				}
				else companyCombo.selectedIndex = 0;
				updateBranches();
			}
			
			private function updateBranches():void
			{
				branchCombo.dataProvider = branchDataProvider(companyCombo.selectedItem.id.*);
				if (companyCombo.selectedItem && companyCombo.selectedItem.id != '')
				{
					//permission hard coded
					branchCombo.enabled = ModelLocator.getInstance().permissionManager.isEnabled('documents.lists.branchFilter');
					for each (var item:XML in branchCombo.dataProvider) if (String(item.id) == ModelLocator.getInstance().branchId)
					{
						branchCombo.selectedItem = item;
						break;
					}
				}
				else branchCombo.enabled = false;
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter type="docCompanyFilter">
					<company value="26F958D1-06D7-4CDB-8002-9205F5871BE3"/>
					<branch value="DFC07022-2743-4C03-8960-8FB62A85B524"/>
				</filter>
				*/
				var contractorId:String = value.company.@value;
				var branchId:String = value.branch.@value;

				var cObjects:Object = companyCombo.dataProvider;
				for each(var o:Object in cObjects){
					if(o.contractorId.* == contractorId)
						companyCombo.selectedItem = o;
				}
				updateBranches();
				if(branchCombo.enabled){
					var bObjects:Object = branchCombo.dataProvider;
					for each(var b:Object in bObjects){
						if(b.id.* == branchId)
							branchCombo.selectedItem = b;
					}
				}
				}
			}
			
			public function clear():void{
				if(companyCombo.enabled)companyCombo.selectedIndex = 0;
				if(branchCombo.enabled)branchCombo.selectedIndex = 0;
				branchCombo.enabled = false;
			}
			
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
	<mx:Tile direction="horizontal">
		<mx:ComboBox id="companyCombo" width="100%" labelField="@label" change="updateBranches()" labelFunction="comboLabelFunction" enabled="{ModelLocator.getInstance().permissionManager.isEnabled('documents.lists.companyFilter')}"/>
		<mx:ComboBox id="branchCombo" width="100%" labelField="@label" labelFunction="comboLabelFunction"/>
	</mx:Tile>
</mx:FormItem>
