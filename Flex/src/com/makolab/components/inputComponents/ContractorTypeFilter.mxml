<?xml version="1.0" encoding="utf-8"?>
<mx:HBox implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:menu="com.makolab.fractus.view.menu.*">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.catalogue.CatalogueFilterError;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			
			import mx.binding.utils.BindingUtils;
			private var _config:XML
			[Bindable]
			public var columnName:String = "documentTypeId";
			
			public function get value():Array
			{
				var ret:Array = [];
				for(var i:int=0;i<type.selectedItems.length;i++){
					ret.push(type.selectedItems[i].name.*);
				}
				return ret;
			}
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if(type.selectedItems.length == 0)throw new CatalogueFilterError("Nie zaznaczono żadnego typu kontrahenta w filtrze typów kontrahentów");//todo use LanguageManager
				if(!parameters.filters)parameters.filters = "";
				for(var i:int=0;i<value.length;i++){
					if(parameters.filters.column.(@field == value[i]).length() == 0){
						var column:XML = <column field="">1</column>;
						column.@field = value[i];
						parameters.filters.* += column;
					};
				}
			}
			
			private function comboLabelFunction(item:Object):String
			{
				var ret:String = item.label.(@lang == LanguageManager.getInstance().currentLanguage).*; 
				return ret;
			}
			
			private function typeDataProvider():Object
			{
				var dp:XMLList = configXml.*;					
				return dp;
			}
			
			private function getSelectedItems():Array
			{
				var items:Array = [];
				var objects:Object = type.dataProvider;
				for each(var o:Object in objects){
					items.push(o);
				}
				return items;
			}
			
			private function setSelection():void
			{
				type.selectedItems = getSelectedItems();
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter value="isReceiver,isBusinessEntity"/>
				*/
				var items:Array = [];
				var values:Array = String(value.@value).split(",");
				for each (var v:String in values){
					var objects:Object = type.dataProvider;
					for each(var o:Object in objects){
						if(o.name.* == v)
							items.push(o);
					}
				}
				type.selectedItems = items;
				}
			}
			
			public function clear():void{
				if(type.enabled)type.selectAll();
			}
			
			public function restore():void{
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
	<mx:XML id="configXml" xmlns="">
		<contractorTypes> 
			<entry>
				<label lang="pl">Dostawca</label>
				<label lang="en">Supplier</label>
				<name>isSupplier</name>
			</entry>
			<entry>
				<label lang="pl">Odbiorca</label>
				<label lang="en">Receiver</label>
				<name>isReceiver</name>
			</entry>
			<entry>
				<label lang="pl">Bank</label>
				<label lang="en">Bank</label>
				<name>isBank</name>
			</entry>
			<entry>
				<label lang="pl">Przedsiębiorstwo</label>
				<label lang="en">Business</label>
				<name>isBusinessEntity</name>
			</entry>
			<entry>
				<label lang="pl">Pracownik</label>
				<label lang="en">Employee</label>
				<name>isEmployee</name>
			</entry>
			<entry>
				<label lang="pl">Handlowiec</label>
				<label lang="en">Merchant</label>
				<name>isSalesman</name>
			</entry>
		</contractorTypes>
	</mx:XML>
	
		<inputComponents:CheckBoxCombo id="type"  creationComplete="setSelection()" width="100%" labelField="label" dataProvider="{typeDataProvider()}" labelFunction="comboLabelFunction"/>
</mx:HBox>
