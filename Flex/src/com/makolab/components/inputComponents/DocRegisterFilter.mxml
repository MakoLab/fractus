<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem width="100%" implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:menu="com.makolab.fractus.view.menu.*" xmlns:generic="com.makolab.fractus.view.generic.*">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.catalogue.CatalogueFilterError;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			
			import mx.binding.utils.BindingUtils;
			
			import flight.utils.config;
			private var _config:XML
			[Bindable]
			public var columnName:String = "financialRegisterId";
			
			public function get value():Object
			{
				return register.selectedId;
			}
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if(value != 0){
					if(!parameters.filters)parameters.filters = "";
					var filterNodes:XMLList = parameters.filters.column.(@field == columnName);
					if(filterNodes.length() == 0){
						var newCondition:XML = <column/>;
						newCondition.@field = columnName;
						newCondition.* = value;
						parameters.filters.columns += newCondition;
					}else{
						filterNodes[0].* = value;
					}
				}
			}
			
			private function getDataProvider(dictionary:XMLList):XMLList
			{
				var all:XML = <entry><id>0</id><label lang="pl">Wszystkie</label><label lang="en">All</label></entry>;
				return all + dictionary;
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter value="BANK_O1"/>
				*/
				var items:Array = [];
				var objects:Object = register.dataProvider;
				for each(var o:Object in objects){
					if(o.symbol.* == value.@value)
						register.selectedItem = o;
				}
				}
			}
			
			public function clear():void{
				if(register.enabled)register.selectedIndex = 0;
			}
			
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
	<generic:FinancialRegisterSelector id="register" showExternalRegisters="{ModelLocator.getInstance().headquarters}" dataProvider="{getDataProvider(DictionaryManager.getInstance().dictionaries.financialRegisters)}" width="100%"/>
</mx:FormItem>
