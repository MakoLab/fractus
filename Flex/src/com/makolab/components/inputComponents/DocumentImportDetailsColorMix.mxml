<?xml version="1.0" encoding="utf-8"?>
<mx:VBox  creationComplete="init()" xmlns:mx="http://www.adobe.com/2006/mxml" width="1000" height="500" xmlns:list="com.makolab.components.list.*" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:documentControls="com.makolab.fractus.view.documents.documentControls.*">
	<!-- nabywca -->
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.contractorData}" width="100%">
				<mx:HBox width="100%">
					<mx:VBox>
						<!-- <documentControls:ContractorComponent
							id="contractorComponent"
							currentState="editor"
							width="40%"
							documentObject="{documentObject}"
							contractorId="{documentObject.xml.contractor.contractor.id}"
							enableAddressSelection="{documentObject.enableAddressSelection}"
						/>
						<documentControls:SalesLockComponent documentObject="{documentObject}" bottom="0" />-->
						<documentControls:ContractorComponent
							id="contractorComponent"
							currentState="editor"
							width="40%"
							documentObject="{documentObject}"
							contractorId="{fileXML.children()[0]['numer-id']}"
							enableAddressSelection="true"
						/>
					</mx:VBox>
						
					<!-- dane nabywcy -->
					<!-- <documentControls:ContractorDataComponent
							width="60%"
							documentObject="{documentObject}"
						/>-->
				</mx:HBox>
			</mx:FormItem>
	
	<list:CommonGrid
		id="grid"
		headerWordWrap="true"
		labelFunctions="{this}"
		width="100%"
		height="100%"
		enabled="true"
	/>	
	
		
	
	<mx:DataGridColumn id="selectionColumn" width="20" rendererIsEditor="true" textAlign="center">
		<mx:headerRenderer>
				<mx:Component>
					<mx:CheckBox selected="{outerDocument.setHeaderCheckBoxSelection(outerDocument.result)}" change="outerDocument.headerCheckBoxChangeHandler(event)"/>
				</mx:Component>
			</mx:headerRenderer>
			<mx:itemRenderer>
				<mx:Component>
					<mx:CheckBox selected="{Boolean(Number(data.@enabled))}" change="outerDocument.checkBoxChangeHandler(event)"/>
				</mx:Component>
			</mx:itemRenderer>
	</mx:DataGridColumn>

	<mx:HBox width="100%" paddingBottom="4" horizontalAlign="center">
		<mx:Button id="importBtn" label="{languageManager.labels.common.import_}" click="importButtonClickHandler()" enabled="false"/>
	</mx:HBox>
		
	<mx:Script>
	<![CDATA[
		import com.makolab.fractus.view.documents.documentEditors.SalesOrderDocumentEditor;
		import com.makolab.fractus.view.documents.documentEditors.DocumentEditor;
		import mx.rpc.events.ResultEvent;
		import com.makolab.fractus.commands.LoadBusinessObjectCommand;
		import com.makolab.fractus.commands.ShowDocumentEditorCommand;
		import com.makolab.fractus.model.document.DocumentObject;
		import com.makolab.fractus.model.LanguageManager;
		import com.makolab.fractus.view.ComponentWindow;
		import com.makolab.components.util.Tools;
		import mx.controls.CheckBox;

		private var _documentObject:DocumentObject;
		[Bindable]
		private var languageManager:LanguageManager = LanguageManager.getInstance();
		
		public static const CALC_NET_PRICE:String = '1';
		public static const CALC_GROSS_PRICE:String = '0';
		
		public var fileXML:XML; //pierwotny XML z pliku przed obróbką
		public var fileName:String = "";
		
		[Bindable] 
		public var result:XML;
		
		private var saleTypeValue:String;
		private var calcTypeValue:String;
		
		public var documentCategory:uint;
		private var window:ComponentWindow;
		private var template:String;
		private var expectedFileType:String;
		
		private var sourceDocumentPrefix:String = "";
		private var sourceDocumentPostfix:String = "";
		
		public var documentId:String = null;
		public var documentType:String = "";
			
		private var config:XML=<config><column labelKey="common.lp" label="Lp." field="@lp" width="50"/>
			<column field="@produktId" dataType="string" label="Id produktu" width="200"/>
			<column field="@kolorId" dataType="string" label="Kolor"/>
			<column field="@bazaId" dataType="decimal" label="Id bazy" width="80"/>
			<column field="@jm" dataType="string" label="jm" width="80"/></config>;
		public  static function showWindow(parent:DisplayObject, docCategory:uint, template:String, expectedFileType:String, filename:String, filexml:XML, documentId:String = "", documentType:String = ""):ComponentWindow
		{
			var component:DocumentImportDetailsColorMix = new DocumentImportDetailsColorMix();
			component.fileName = filename;
			component.fileXML = filexml;
			component.template = template;
			component.documentCategory = docCategory;
			component.expectedFileType = expectedFileType;
			
			component.documentId = documentId;
			component.documentType = documentType;
			
			var window:ComponentWindow = ComponentWindow.showWindow(component, 0, new Rectangle(-1, -1, 1000, 500));
			component.window = window;
			
			return component.window;
		}
		
		private function init():void
		{
	
		
			insertData();
			setImportBtnEnabled();
		}
		
		private function insertData():void
		{
			this.result = processPortaOrder(fileXML);
			this.grid.dataProvider = this.result.*;
			this.grid.config = XMLList(this.config);
			var columns:Array = [selectionColumn];
			
			for each(var column:DataGridColumn in this.grid.columns){
				columns.push(column);
			}
			this.grid.columns = columns;
				
			/*---doklada lp---*/
			var counter:int = 1;
			if(this.result){
				for each (var i:XML in this.result.*)
				{
					i.@lp=counter.toString();
					counter++;
				}
			}
			//------------------
			
			
			this.window.title = languageManager.labels.title.documentImportDetails;
			for each (var document:XML in result.*)document.@enabled = 1; // zaznaczenie wszystkich na dzień dobry
			
		
		}
		[Bindable]
			public function set documentObject(value:DocumentObject):void 
			{ 
				_documentObject = value;
				
			}
			public function get documentObject():DocumentObject { return _documentObject; }
			
		private function processPortaOrder(fileXML:XML):XML
		{
			var orderXML:XML = <order></order>;
			var linesList:XMLList;
			var i:int=0;
			
			var dataArray:XMLList=fileXML.children();
	
			for(i=1 ; i < dataArray.length() ; i++)
			{								
				var lineArray:XML = dataArray[i];
				var lineXML:XML = <line />;
				
				lineXML.@kolor = String(lineArray.kolor);
				lineXML.@baza = String(lineArray.baza);
				lineXML.@ilosc = String(lineArray.ilosc);
				lineXML.@sztuk = String(lineArray.sztuk);
				lineXML.@wartoscPigment=String(lineArray["wartosc-pigment"]); 
				lineXML.@wartoscBaza = String(lineArray["wartosc-baz"]);
				lineXML.@kod1 = String(lineArray.kod1);
				lineXML.@qta1 = String(lineArray.qta1);
					lineXML.@kod2 = String(lineArray.kod2);
				lineXML.@qta2 = String(lineArray.qta2);
					lineXML.@kod3 = String(lineArray.kod3);
				lineXML.@qta3 = String(lineArray.qta3);
					lineXML.@kod4 = String(lineArray.kod4);
				lineXML.@qta4 = String(lineArray.qta4);
					lineXML.@kod5 = String(lineArray.kod5);
				lineXML.@qta5 = String(lineArray.qta5);
				
				lineXML.@uwagi = String(lineArray.uwagi);
				lineXML.@jm = String(lineArray.jm);
				lineXML.@produktId = String(lineArray["produkt-id"]);
				lineXML.@kolorId = String(lineArray["kolor-id"]);
				lineXML.@bazaId = String(lineArray["baza-id"]);
				
				
				orderXML.appendChild(lineXML);
			}
			return orderXML;
		}
		
		private function setImportBtnEnabled():void
		{
				this.importBtn.enabled = true;
		}
		
		private function getImportData():XML
		{
			var dataToImport:XML = <source></source>;
			var sourceDocumentBody:String = sourceDocumentPrefix + "\n";
			
			for each (var x:XML in this.result.*.(valueOf().@enabled == 1))
			{
				sourceDocumentBody += "\"" + x.@groupCode + "\"" + ",";
				sourceDocumentBody += "\"" + x.@itemCode + "\"" + ",";
				sourceDocumentBody += x.@quantity + ",";
				sourceDocumentBody += x.@additionalData;
				sourceDocumentBody += "\n";
			}
			
			sourceDocumentBody += sourceDocumentPostfix;
			
			
			if(this.documentId == "")
			{
				dataToImport.@type = fileXML.@type;
				dataToImport.appendChild(<insertMissingItems>1</insertMissingItems>);
				dataToImport.appendChild(<saleType>{saleTypeValue}</saleType>);
				dataToImport.appendChild(<calcType>{calcTypeValue}</calcType>);
			}
			else
			{
				dataToImport.@type = this.documentType;
			}
			dataToImport.appendChild(<sourceDocument>{sourceDocumentBody}</sourceDocument>);
			
			return dataToImport;
		}
		
		/*--------------------HANDLERY----------------------*/
		private function importButtonClickHandler():void
		{
			var dataToImport:XML = getImportData();
			dataToImport.@type = this.expectedFileType;
			
			if(this.documentId == "")
			{
				var cmd:ShowDocumentEditorCommand = new ShowDocumentEditorCommand(this.documentCategory);
				cmd.template = this.template;
				cmd.source = dataToImport;
				cmd.execute();
				window.hide();
			}
			else
			{
				var cmdL:LoadBusinessObjectCommand = new LoadBusinessObjectCommand(this.documentType, this.documentId);
				cmdL.source = dataToImport;
				cmdL.execute();
				cmdL.addEventListener(ResultEvent.RESULT, handleCommandResult);
				window.hide();
			}
		}

		private function handleCommandResult(event:ResultEvent):void
		{
			var editorClass:Class = SalesOrderDocumentEditor;
			var documentObject:DocumentObject = new DocumentObject(XML(event.result));
			DocumentEditor.showWindow(documentObject, editorClass);
		}
		
		public function headerCheckBoxChangeHandler(event:Event):void
		{
			for each(var item:XML in result.*){
				item.@enabled = event.target.selected ? 1 : 0;
			}
			
			if((this.result.*.@enabled).contains(1))
			{
				importBtn.enabled = true;
			}
			else
			{
				importBtn.enabled = false;
			}
		}
		
		public function checkBoxChangeHandler(event:Event):void
		{
			var index:int = grid.itemRendererToIndex(event.target as CheckBox); 
			this.result.*[index].@enabled = event.target.selected ? 1 : 0;
			
			if(((this.result.*.@enabled).contains(1)) && saleTypeValue && calcTypeValue)
			{
				importBtn.enabled = true;
			}
			else
			{
				importBtn.enabled = false;
			}
		}
				
		private function salesTypeChange(event:Event):void
		{
//			if(itemSales.selected && !reservation.selected)saleTypeValue = DocumentObject.ITEM_SALE;
//			if(itemSales.selected && reservation.selected)saleTypeValue = DocumentObject.ITEM_SALE_RESERVATION;
//			if(serviceSales.selected && !reservation.selected)saleTypeValue = DocumentObject.SERVICE_SALE;
//			if(serviceSales.selected && reservation.selected)saleTypeValue = DocumentObject.SERVICE_SALE_RESERVATION;
//			
			setImportBtnEnabled();
		}
		
		private function calcTypeChange(event:Event):void
		{
			//if(net.selected)calcTypeValue = CALC_NET_PRICE;
			//if(gross.selected)calcTypeValue = CALC_GROSS_PRICE;
			
			setImportBtnEnabled();
		}
			
		public function setHeaderCheckBoxSelection(conditions:XML):Boolean
		{
			var selected:Boolean = true;
			for each(var item:XML in result.*){
				if(item.attribute("enabled").length() == 0 || item.@enabled == 0){
					selected = false;
					break;
				}
			}
			return selected;
		}
	]]>
</mx:Script>
</mx:VBox>