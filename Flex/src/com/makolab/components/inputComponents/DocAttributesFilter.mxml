<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem width="100%" implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:menu="com.makolab.fractus.view.menu.*">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.catalogue.CatalogueFilterError;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			
			import mx.binding.utils.BindingUtils;
			
			import flight.utils.config;
			private var _config:XML
			
			[Bindable]
			private var attributesNames:String = '';
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
				attributesNames = _config.@attributesNames;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				
				if(type.selectedItems.length != 0){	
					if(!parameters.filters)parameters.filters = "";
					for(var i:int = 0; i<type.selectedItems.length; i++){						
						var filterNodes:XMLList = parameters.filters.column.(@field == type.selectedItems[i].id.*);
						if(filterNodes.length() == 0){
							var newCondition:XML = <column/>;
							newCondition.@field = "decimalValue";
							newCondition.@documentFieldId = type.selectedItems[i].id.*;
							newCondition.* = 1;
							parameters.filters.columns += newCondition;
						}else filterNodes[0].* = 1;
					}
				}
			}
			
			private function comboLabelFunction(item:Object):String
			{
				var ret:String = item.label.(@lang == LanguageManager.getInstance().currentLanguage).*; 
				return ret;
			}
			
			private function getSelectedItems(data:Object):Array
			{
				var items:Array = [];
				var objects:Object = typeDataProvider();
				for each(var o:Object in objects){
					items.push(o);
				}
				return items;
			}
			
			private function setSelection():void
			{
				//type.selectedItems = getSelectedItems(null);
				type.selectedItems = [];
			}
			
			private function typeDataProvider():Object
			{
				var dp:XMLList = new XMLList();
				
				if(attributesNames!=''){
					var names:Array = attributesNames.toString().split(",");
					for(var i:int=0;i<names.length;i++){
						dp += DictionaryManager.getInstance().dictionaries.documentFields.(name.* == names[i]);
					}	
				}
				else dp = DictionaryManager.getInstance().dictionaries.documentFields;

				return dp;
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter type="docTypeFilter" value="PA,FW"/>
				*/
				var items:Array = [];
				var values:Array = String(value.@value).split(",");
				for each (var v:String in values){
					var objects:Object = type.dataProvider;
					for each(var o:Object in objects){
						if(o.name.* == v)
							items.push(o);
					}
				}
				type.selectedItems = items;
				}
			}
			
			public function clear():void{
				//if(type.enabled)type.selectAll();
				if(type.enabled)type.selectedItems = [];
			}
			
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
	<inputComponents:CheckBoxCombo id="type" width="100%" minWidth="250" creationComplete="setSelection()" labelField="@label" dataProvider="{typeDataProvider()}" labelFunction="comboLabelFunction"/>
</mx:FormItem>
