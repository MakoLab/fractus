<?xml version="1.0" encoding="utf-8"?>
<mx:VBox creationComplete="init()" xmlns:mx="http://www.adobe.com/2006/mxml" width="1000" height="500" xmlns:list="com.makolab.components.list.*" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:documentControls="com.makolab.fractus.view.documents.documentControls.*">
	<mx:HBox verticalAlign="middle" horizontalAlign="left" paddingTop="5">
		<mx:Label text="{LanguageManager.getInstance().labels.common.fileName}"/>
		<mx:Text id="fileNameText" fontWeight="bold"/>
		<mx:Spacer width="100%"/>
		<mx:HBox id="calcTypeBox" borderStyle="solid" borderThickness="1" borderColor="white" verticalAlign="middle">
			<mx:Label text="{languageManager.labels.common.clientType}"/>
			<mx:VBox verticalGap="0">
				<mx:RadioButtonGroup id="calcType" itemClick="calcTypeChange(event)"/>
				<mx:RadioButton groupName="calcType" id="net" label="{languageManager.labels.documents.businessEntity}" value="{CALC_NET_PRICE}" width="300"/>
				<mx:RadioButton groupName="calcType" id="gross" label="{languageManager.labels.documents.retailCustomer}" value="{CALC_GROSS_PRICE}" width="300"/>	
			</mx:VBox>
		</mx:HBox>
		<mx:Spacer width="100%"/>
		<mx:HBox id="saleTypeBox"  borderStyle="solid" borderThickness="1" borderColor="white" verticalAlign="middle">
			<mx:Label text="{languageManager.labels.documents.saleType}"/>
			<mx:VBox verticalGap="0">
				<mx:RadioButtonGroup id="saleType" itemClick="salesTypeChange(event)"/>
				<mx:RadioButton id="itemSales" groupName="saleType" label="{languageManager.labels.documents.itemSales}"/>
				<mx:RadioButton id="serviceSales" groupName="saleType" label="{languageManager.labels.documents.serviceSales}"/>
			</mx:VBox>
			<mx:CheckBox id="reservation" label="{languageManager.labels.documents.reservation}" change="salesTypeChange(event)"/>
		</mx:HBox>		
	</mx:HBox>
	
	<list:CommonGrid
		id="grid"
		headerWordWrap="true"
		labelFunctions="{this}"
		width="100%"
		height="100%"
		enabled="true"
	/>	
	<mx:DataGridColumn id="selectionColumn" sortable="false" width="20" rendererIsEditor="true" textAlign="center">
		<mx:headerRenderer>
				<mx:Component >
					<mx:CheckBox selected="{outerDocument.setHeaderCheckBoxSelection(outerDocument.result)}" change="outerDocument.headerCheckBoxChangeHandler(event)"/>
				</mx:Component>
			</mx:headerRenderer>
			<mx:itemRenderer>
				<mx:Component>
					<mx:CheckBox selected="{Boolean(Number(data.@enabled))}" change="outerDocument.checkBoxChangeHandler(event)"/>
				</mx:Component>
			</mx:itemRenderer>
	</mx:DataGridColumn>
	
	<mx:HBox width="100%" paddingBottom="4" horizontalAlign="center">
		<mx:Button id="importBtn" label="{languageManager.labels.common.import_}" click="importButtonClickHandler()" enabled="false"/>
	</mx:HBox>
	<mx:Script>
	<![CDATA[
		import com.makolab.fractus.view.documents.documentEditors.SalesOrderDocumentEditor;
		import com.makolab.fractus.view.documents.documentEditors.DocumentEditor;
		import mx.rpc.events.ResultEvent;
		import com.makolab.fractus.commands.LoadBusinessObjectCommand;
		import com.makolab.fractus.commands.ShowDocumentEditorCommand;
		import com.makolab.fractus.model.document.DocumentObject;
		import com.makolab.fractus.model.LanguageManager;
		import com.makolab.fractus.view.ComponentWindow;
		import com.makolab.components.util.Tools;
		import mx.controls.CheckBox;
		
		[Bindable]
		private var languageManager:LanguageManager = LanguageManager.getInstance();
		
		public static const CALC_NET_PRICE:String = '1';
		public static const CALC_GROSS_PRICE:String = '0';
		
		public var fileXML:XML; //pierwotny XML z pliku przed obróbką
		public var fileName:String = "";
		
		[Bindable] 
		public var result:XML;
		
		private var saleTypeValue:String;
		private var calcTypeValue:String;
		
		public var documentCategory:uint;
		private var window:ComponentWindow;
		private var template:String;
		private var expectedFileType:String;
		
		private var sourceDocumentPrefix:String = "";
		private var sourceDocumentPostfix:String = "";
		
		public var documentId:String = null;
		public var documentType:String = "";
		private var delimiter:String;	
		private var configNum:int;
		public static function showWindow(parent:DisplayObject, docCategory:uint, template:String, expectedFileType:String, filename:String, filexml:XML, documentId:String = "", documentType:String = "",xmlDelimiter:String = ",",configNumber:int=0):ComponentWindow
		{
			var component:DocumentImportDetails = new DocumentImportDetails();
			component.fileName = filename;
			component.fileXML = filexml;
			component.template = template;
			component.documentCategory = docCategory;
			component.expectedFileType = expectedFileType;
			component.delimiter=xmlDelimiter;
			component.documentId = documentId;
			component.documentType = documentType;
			component.configNum=configNumber;
			
			var window:ComponentWindow = ComponentWindow.showWindow(component, 0, new Rectangle(-1, -1, 1000, 500));
			component.window = window;
			
			return window;
		}
		
		private function init():void
		{
			if(this.documentId != "")
			{
				this.calcTypeBox.visible = false;
				this.calcTypeBox.includeInLayout = false;
					
				this.saleTypeBox.visible = false;
				this.saleTypeBox.includeInLayout = false;
				
				this.calcTypeValue = "_";
				this.saleTypeValue = "_";
			}
			
			insertData();
			setImportBtnEnabled();
		}
		
		private function insertData():void
		{
			this.result = processPortaOrder(fileXML);
			this.grid.dataProvider = this.result.*;
			switch(configNum)
			{
			case 0:
				this.grid.config = XMLList(this.config);break
			case 1:
				this.grid.config = XMLList(this.config1);break
			}
			var columns:Array = [selectionColumn];
			
			for each(var column:DataGridColumn in this.grid.columns){
				columns.push(column);
			}
			this.grid.columns = columns;
				
			/*---doklada lp---*/
			var counter:int = 1;
			if(this.result){
				for each (var i:XML in this.result.*)
				{
					i.@lp=counter.toString();
					counter++;
				}
			}
			//------------------
			
			
			this.window.title = languageManager.labels.title.documentImportDetails;
			for each (var document:XML in result.*)document.@enabled = 1; // zaznaczenie wszystkich na dzień dobry
			
			this.fileNameText.text = this.fileName;
		}
		
		private function processPortaOrder(fileXML:XML):XML
		{
			var orderXML:XML = <order></order>;
			var linesList:XMLList;
			var i:int=0;
			var i0:int=0;
			var dataArray:Array = Tools.CSVtoArray(String(fileXML), delimiter);
			if(configNum==1)
			{
				i0=0;
			}
			else
			{
				i0=1;
			//prefix , postfix
				var prefixArray:Array = dataArray[0];
				var postfixArray:Array = dataArray[dataArray.length-1];
				
				for(i=0; i < prefixArray.length; i++)
				{
					sourceDocumentPrefix += prefixArray[i];
					if(i < prefixArray.length - 1)
					{
						sourceDocumentPrefix += delimiter;
					}				
				}
	
				for(i=0; i < postfixArray.length; i++)
				{
					sourceDocumentPostfix += postfixArray[i];
					if(i < prefixArray.length - 1)
					{
						sourceDocumentPostfix += delimiter;
					}				
				}
			}		
			for(i=i0 ; i < dataArray.length - i0 ; i++)
			{								
				var lineArray:Array = dataArray[i];
				var lineXML:XML = <line />;
				
				lineXML.@groupCode = String(lineArray[0]);
				lineXML.@itemCode = String(lineArray[1]);
				
				if(configNum==1)
				{
					lineXML.@quantity = lineArray[3];
					lineXML.@additionalData = lineArray[5];
					lineXML.@initialNetPrice = lineArray[4];
					lineXML.@itemName = lineArray[2];
				}
				else
				{
					lineXML.@quantity = lineArray[2];
					lineXML.@additionalData = lineArray[3];
				}
				
				orderXML.appendChild(lineXML);
			}
			return orderXML;
		}
		
		private function setImportBtnEnabled():void
		{
			if(saleTypeValue && calcTypeValue){
				this.importBtn.enabled = true;
				saleTypeBox.errorString = "";
				calcTypeBox.errorString = "";
			}
			else if(!saleTypeValue && calcTypeValue){
				this.importBtn.enabled = false;
				saleTypeBox.errorString = languageManager.labels.error.salesOrder.saleType;
				calcTypeBox.errorString = "";
			}
			else if(saleTypeValue && !calcTypeValue){
				this.importBtn.enabled = false;
				saleTypeBox.errorString = "";
				calcTypeBox.errorString = languageManager.labels.error.salesOrder.calcType;
			}
			else{
				this.importBtn.enabled = false;
				saleTypeBox.errorString = languageManager.labels.error.missingData;
				calcTypeBox.errorString = languageManager.labels.error.missingData;
			}
		}
		
		private function getImportData():XML
		{
			var dataToImport:XML = <source></source>;
			var sourceDocumentBody:String = sourceDocumentPrefix + "\n";
			
			for each (var x:XML in this.result.*.(valueOf().@enabled == 1))
			{
				sourceDocumentBody += "\"" + x.@groupCode + "\"" + ",";
				sourceDocumentBody += "\"" + x.@itemCode + "\"" + ",";
				sourceDocumentBody += x.@quantity + ",";
				sourceDocumentBody += x.@additionalData;
				
				if(configNum==1)
				{
					
					sourceDocumentBody +=",\""+ x.@itemName+"\"";
					sourceDocumentBody +=","+ x.@initialNetPrice;
				}
				sourceDocumentBody += "\n";
			}
			
			sourceDocumentBody += sourceDocumentPostfix;
			
			
			if(this.documentId == "")
			{
				dataToImport.@type = fileXML.@type;
				dataToImport.appendChild(<insertMissingItems>1</insertMissingItems>);
				dataToImport.appendChild(<saleType>{saleTypeValue}</saleType>);
				dataToImport.appendChild(<contractorType>{calcTypeValue}</contractorType>);
				dataToImport.appendChild(<fileName>{fileName}</fileName>);
				
				
			}
			else
			{
				dataToImport.@type = this.documentType;
				dataToImport.appendChild(<fileName>{fileName}</fileName>);
			}
			dataToImport.appendChild(<sourceDocument>{sourceDocumentBody}</sourceDocument>);
			
			return dataToImport;
		}
		
		
		/*--------------------HANDLERY----------------------*/
		
		private function importButtonClickHandler():void
		{
			var dataToImport:XML = getImportData();
			dataToImport.@type = this.expectedFileType;
			
			if(this.documentId == "")
			{
				var cmd:ShowDocumentEditorCommand = new ShowDocumentEditorCommand(this.documentCategory);
				cmd.template = this.template;
				cmd.source = dataToImport;
				cmd.execute();
				window.hide();
			}
			else
			{
				var cmdL:LoadBusinessObjectCommand = new LoadBusinessObjectCommand(this.documentType, this.documentId);
				cmdL.source = dataToImport;
				cmdL.execute();
				cmdL.addEventListener(ResultEvent.RESULT, handleCommandResult);
				window.hide();
			}
		}

		private function handleCommandResult(event:ResultEvent):void
		{
			var editorClass:Class = SalesOrderDocumentEditor;
			var documentObject:DocumentObject = new DocumentObject(XML(event.result));
			DocumentEditor.showWindow(documentObject, editorClass);
		}
		
		public function headerCheckBoxChangeHandler(event:Event):void
		{
			for each(var item:XML in result.*){
				item.@enabled = event.target.selected ? 1 : 0;
			}
			
			if((this.result.*.@enabled).contains(1))
			{
				importBtn.enabled = true;
			}
			else
			{
				importBtn.enabled = false;
			}
		}
		
		public function checkBoxChangeHandler(event:Event):void
		{
			var index:int = grid.itemRendererToIndex(event.target as CheckBox); 
		
			this.result.*[	(int(grid.dataProvider[index].@lp) -1)].@enabled = event.target.selected ? 1 : 0;
			
			if(((this.result.*.@enabled).contains(1)) && saleTypeValue && calcTypeValue)
			{
				importBtn.enabled = true;
			}
			else
			{
				importBtn.enabled = false;
			}
		}
				
		private function salesTypeChange(event:Event):void
		{
			if(itemSales.selected && !reservation.selected)saleTypeValue = DocumentObject.ITEM_SALE;
			if(itemSales.selected && reservation.selected)saleTypeValue = DocumentObject.ITEM_SALE_RESERVATION;
			if(serviceSales.selected && !reservation.selected)saleTypeValue = DocumentObject.SERVICE_SALE;
			if(serviceSales.selected && reservation.selected)saleTypeValue = DocumentObject.SERVICE_SALE_RESERVATION;
			
			setImportBtnEnabled();
		}
		
		private function calcTypeChange(event:Event):void
		{
			if(net.selected)calcTypeValue = CALC_NET_PRICE;
			if(gross.selected)calcTypeValue = CALC_GROSS_PRICE;
			
			setImportBtnEnabled();
		}
			
		public function setHeaderCheckBoxSelection(conditions:XML):Boolean
		{
			var selected:Boolean = true;
			for each(var item:XML in result.*){
				if(item.attribute("enabled").length() == 0 || item.@enabled == 0){
					selected = false;
					break;
				}
			}
			return selected;
		}
		
	]]>
</mx:Script>
		<mx:XML id="config">
		<config>
			<column labelKey="common.lp" label="Lp." field="@lp" width="50"/>
			<column field="@groupCode" dataType="string" label="Kod grupy" width="200"/>
			<column field="@itemCode" dataType="string" label="Kod towaru"/>
			<column field="@quantity" dataType="decimal" labelKey="common.quantity" label="Ilość" width="80"/>
			<column field="@additionalData" dataType="string" label="Dodatkowe pole" width="80"/>
		</config>
	</mx:XML>
	<mx:XML id="config1">
		<config>
			<column labelKey="common.lp" label="Lp." field="@lp" width="50"/>
			<column field="@groupCode" dataType="string" label="Kod grupy" width="200"/>
			<column field="@itemCode" dataType="string" label="Kod towaru"/>
			<column field="@quantity" dataType="decimal" label="Ilość" width="80"/>
			<column field="@itemName" dataType="string" labelKey="common.shortName" label="Nazwa" width="150"/>
			<column field="@initialNetPrice" dataType="string" label="Cena" width="80"/>
			<column field="@additionalData" dataType="string" label="Dodatkowe pole" width="80"/>
		</config>
	</mx:XML>
	
</mx:VBox>