<?xml version="1.0" encoding="utf-8"?>
<mx:HBox width="100%" implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:inputComponents="com.makolab.components.inputComponents.*"
	creationComplete="onCreationComplete()">
 		<mx:Label text="{LanguageManager.getInstance().labels.dashboard.realizationDate}" width="20%"/>
		<mx:ComboBox
			id="dateCombo"
			dataProvider="{[
				{label : LanguageManager.getInstance().labels.date.filter.noDateLimit, value : null},
				{label : LanguageManager.getInstance().labels.date.filter.today, value : 'day'},
				{label : LanguageManager.getInstance().labels.date.filter.yesterday, value : 'yesterday'},
				{label : LanguageManager.getInstance().labels.date.filter.currentMonth, value : 'month'},
				{label : LanguageManager.getInstance().labels.date.filter.previousMonth, value : 'previousMonth'},
				{label : LanguageManager.getInstance().labels.date.filter.currentYear, value : 'year'},
				{label : LanguageManager.getInstance().labels.date.filter.currentYearToToday, value : 'yearToToday'},
				{label : LanguageManager.getInstance().labels.date.filter.previousYear, value : 'previousYear'},
				{label : LanguageManager.getInstance().labels.date.filter.last14days, value : '14days'},
				{label : LanguageManager.getInstance().labels.date.filter.last30days, value : '30days'},
				{label : LanguageManager.getInstance().labels.date.filter.enterDates, value : 'custom'}
				]}"
			change="dateComboChange()"
			labelField="label"
			rowCount="6"
			selectedIndex="{selectedIndex}"
			/>
 
	<mx:Tile id="tile" height="100%" direction="{dateFieldsDirection}" width="100%">
		<mx:HBox width="100%">
			<mx:Label text="{LanguageManager.getInstance().labels.date.filter.fromDate}" width="20%"/>
			<inputComponents:DateEditor
					id="dateFromField"
					change="handleDateChange(event)"
					enabled="{Boolean(dateCombo.selectedItem.value)}"
					editable="true"
					width="80%"
				 	textAlign="right"
				 	selectedDate="{new Date()}"
				/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{LanguageManager.getInstance().labels.date.filter.toDate}" width="20%"/>
			<inputComponents:DateEditor
					id="dateToField"
					change="handleDateChange(event)"
					enabled="{Boolean(dateCombo.selectedItem.value)}"
					editable="true"
					width="80%"
					textAlign="right"
				 	selectedDate="{new Date()}"
				/>
		</mx:HBox>
	</mx:Tile>

	<mx:Script>
		<![CDATA[
			import flight.utils.config;
			import mx.controls.DateField;
			import mx.formatters.DateFormatter;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.components.util.Tools;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			
			[Bindable]
			public var dateFieldsDirection:String ="vertical";
			/**
			 * @private
			 */
			[Bindable]
			public function get dateFrom():Date
			{
				return dateFromField.selectedDate;
			}
			
			private var _selectedIndex:int = 1;
			[Bindable]
			public function set selectedIndex(value:int):void
			{
				setSelectedIndex(value);
			}
			public function get selectedIndex():int
			{
				return _selectedIndex;
			}
			private function setSelectedIndex(value:int):void
			{
				_selectedIndex = value;
				dateCombo.selectedIndex = value;
				dateComboChange();
			}
			/**
			 * First date in a time interval.
			 * @see #dateTo
			 */
			public function set dateFrom(value:Date):void
			{
				dateFromField.selectedDate = value;
			}
			/**
			 * @private
			 */
			[Bindable]
			public function get dateTo():Date
			{
				return dateToField.selectedDate;
			}
			
			/**
			 * The last date in a time interval.
			 * @see #dateFrom
			 */
			public function set dateTo(value:Date):void
			{
				dateToField.selectedDate = value;
			}
			
			private function onCreationComplete():void
			{
				if (!config) return;
				var o:Object = config.attribute("selectedDateRange").toString();
				
				if(o!="")
				{
					if (o=="all") o=null;	
					for (var i:int = 0; i<this.dateCombo.dataProvider.length; i++)
					{
						if(this.dateCombo.dataProvider[i].value == o) 
						{
							setSelectedIndex(i);
							break;
						}
					}
				}
			}
			
			private function dateComboChange():void
			{
				var value:String = dateCombo.selectedItem.value;
				var fd:Date, td:Date;
				fd = dateFromField.selectedDate;
				td = dateToField.selectedDate;
				switch (value)
				{
					case null:
						fd = null;
						td = null;
						break;
					case "day":
						fd = new Date();
						td = fd;
						break;
					case "yesterday":
						fd = new Date();
						fd.date -= 1;
						td = fd;
						break;
					case "month":
						fd = new Date();
						fd.date = 1;
						td = new Date();
						td.date = 1;
						td.month++;
						td.date--;
						break;
					case "previousMonth":
						fd = new Date();
						fd.date = 1;
						fd.month -= 1;
						td = new Date();
						td.date = 0;
						break;
					case "year":
						fd = new Date();
						fd.date = 1;
						fd.month = 0;
						td = new Date();
						td.date = 1;
						td.month = 0;
						td.fullYear++;
						td.date--;
						break;
					case "yearToToday":
						fd = new Date();
						fd.date = 1;
						fd.month = 0;
						td = new Date();
						break;
					case "previousYear":
						fd = new Date();
						fd.fullYear--;
						fd.date = 1;
						fd.month = 0;
						td = new Date();
						td.date = 1;
						td.month = 0;
						td.date--;
						break;
					case "14days": case "30days":
						fd = new Date();
						fd.date -= parseInt(value);
						td = new Date();
						break;
				}
				dateFromField.selectedDate = fd;
				dateToField.selectedDate = td;
			}
			/**
			 * Sets the end date to start date if it's earlier.
			 */
			protected function handleDateChange(event:CalendarLayoutChangeEvent):void
			{
				dateCombo.selectedIndex = 10;
				if (dateFromField.selectedDate)
				{
					if (!dateToField.selectedDate || dateToField.selectedDate < dateFromField.selectedDate) dateToField.selectedDate = dateFromField.selectedDate;	
				}
			}
			
			private var _config:XML
			
			public function set config(value:XML):void
			{
				_config = value;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if (dateFrom && dateTo)
				{
					// everything from the start of the first day till the end of the second day
					parameters.eventDateTo = Tools.dateToString(dateTo) + "T23:59:59.997";
					parameters.eventDateFrom = Tools.dateToString(dateFrom);
				}
				else
				{
					if (parameters.eventDateTo.length() > 0) delete parameters.eventDateTo;
					if (parameters.eventDateFrom.length() > 0) delete parameters.eventDateFrom;
				}
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodaÄ‡
				
				/*
				<filter>
					<dateFormat value="DD-MM-YYYY"/>
					<dateFrom value="30-12-2007"/>
					<dateTo value="30-12-2010"/>
				</filter>
				*/
				selectedIndex = 10;
				var fd:Date, td:Date;
				
				fd = new Date();
						fd = DateField.stringToDate(value.dateFrom.@value,value.dateFormat.@value);
				td = new Date();
						td = DateField.stringToDate(value.dateTo.@value,value.dateFormat.@value);
						
				dateFromField.selectedDate = fd;
				dateToField.selectedDate = td;
				}
			}
			
			private var lastSelectedIndex:int;
			private var lastFromDate:Date;
			private var lastToDate:Date;
			
			public function clear():void{
				if(dateCombo.selectedIndex!=0){
					lastSelectedIndex = dateCombo.selectedIndex;
					lastFromDate = dateFromField.selectedDate;
					lastToDate = dateToField.selectedDate;
				}
				if(dateCombo.enabled)setSelectedIndex(0);
			}
			
			public function restore():void{
				if(dateCombo.enabled){
					dateFromField.selectedDate = lastFromDate;
					dateToField.selectedDate = lastToDate;
					setSelectedIndex(lastSelectedIndex);
				}
			}
				
		]]>
	</mx:Script>
</mx:HBox>
