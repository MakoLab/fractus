<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:inputComponents="com.makolab.components.inputComponents.*" 
	verticalGap="0" height="0"
	xmlns:template="com.makolab.components.document.template.*"
	implements="com.makolab.components.util.IExportableComponent"
	creationComplete="init()">
	
	<mx:Metadata>
		[Event(name="edit", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.components.catalogue.CatalogueItemWindowEvent;
			import com.makolab.fractus.view.catalogue.ContractorsCatalogue;
			import com.makolab.components.catalogue.CatalogueItemWindow;
			import mx.utils.ColorUtil;
			import mx.rpc.events.ResultEvent;
			import com.makolab.fractus.commands.LoadBusinessObjectCommand;
			import com.makolab.fractus.view.ComponentWindow;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.components.util.ComponentExportManagerDialog2;
			import com.makolab.components.util.ComponentExportManagerDialog;
			import mx.managers.PopUpManager;
			import mx.core.IFlexDisplayObject;
			import com.makolab.components.util.ComponentExportManager;
			import com.makolab.fractus.model.DictionaryManager;
			import mx.controls.Alert;
			
			private var _data:Object;				
			/**
			 * Lets you pass a value to the editor.
			 */
			 
			private var _contractorId:String;
			
			[Bindable] public var allowModification:Boolean;
			
			[Bindable]
			private var contractor:XML;
			
			public function set contractorId(value:String):void
			{
				_contractorId = value;
				var cmd:LoadBusinessObjectCommand = new LoadBusinessObjectCommand(LoadBusinessObjectCommand.TYPE_CONTRACTOR,_contractorId);
				cmd.addEventListener(ResultEvent.RESULT,loadContractorHandler);
				cmd.execute();
			}
			
			private function loadContractorHandler(event:ResultEvent):void
			{
				data = XML(XML(event.result).contractor);
			}
			
			public function get contractorId():String
			{
				return _contractorId;
			}
			
			[Bindable]
			private var addresses:XMLList;
			
			[Bindable] private var lm:LanguageManager = LanguageManager.getInstance();
			
			[Bindable]
			override public function set data(value:Object):void	{
				_data = value;
				if(data && data[0])this.height = NaN;
				else this.height = 0;
				
				addresses = new XMLList();
				var tAdd:XMLList;
				if(value) tAdd = value.addresses.*;
				
				for each (var o:XML in tAdd) {
					if(o.city != '' || o.postOffice != '' || o.address != '' || o.postCode != '') {
						addresses += o;
					}
				}
				
				init();
			}
			/**
			 * @private
			 */
			override public function get data(): Object	{
				return _data;
			}
			
			/**
			 * Handler for <code>creationComplete</code> event.
			 */
			private function init():void
			{
				this.contextMenu = ComponentExportManager.getInstance().getExportMenu();
			}
			
			/**
			 * Shows the export dialog window.
			 */
			public function showExportDialog() : void {
				var dialog:IFlexDisplayObject = PopUpManager.createPopUp(DisplayObject(ModelLocator.getInstance().applicationObject), ComponentExportManagerDialog2, true);
				PopUpManager.centerPopUp(dialog);
			}
			
			/**
			 * Exports an XML to a given format.
			 */
			public function exportXmlAll(format:String):XML
			 {
			 	return exportXml(format);
			 }
			public function exportXml(format:String):XML
			{
				ModelLocator.getInstance().exportListXML = <id>{data.id}</id>;
				return ModelLocator.getInstance().exportListXML;
			}
			
			public static function showWindow(contractorId:String):ComponentWindow
			{
				var renderer:ContractorRenderer = new ContractorRenderer();
				var cmd:LoadBusinessObjectCommand = new LoadBusinessObjectCommand(LoadBusinessObjectCommand.TYPE_CONTRACTOR, contractorId);
				cmd.targetObject = renderer;
				cmd.targetField = 'data';
				cmd.noRoot = true;
				cmd.execute();
				return ComponentWindow.showWindow(renderer, 0, new Rectangle(-1, -1, 300, 200));
			}
			
			private function companyEditHandler(event:Event):void
			{
				var editWindow:CatalogueItemWindow = ContractorsCatalogue.showContractorWindow(this.data.id.*);
				editWindow.addEventListener(CatalogueItemWindowEvent.DATA_SAVE_COMPLETE,function():void{contractorId = data.id});
			}
			
			private function rendererDataChange(event:Event):void
			{
				var target:AttributeRenderer = event.target as AttributeRenderer;
				//target.validateNow();
				attributesForm.validateNow();
			}
			
			private function labelFunction(value:*):String {
				if(value) {
					return DictionaryManager.getInstance().dictionaries.getById(value.contractorFieldId).label.(@lang==lm.currentLanguage)[0];
				}
				return "";
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.headerBar
		{
			paddingBottom:0;
			paddingTop:0;
			cornerRadius:0;
			fillColors:#fff, #003;
			fillAlphas:0.2,0.5;
		}
		.header
		{
			font-size: 12px;
			font-weight: bold;
			padding-left: 4px;
			padding-right: 4px;
		}
		.subHeader
		{
			padding-top: 5px;
			padding-left: 10px;
			font-size: 10px;
			font-weight: normal;
		}
		.address
		{
			padding-left: 10px;
			font-size: 10px;
			/*
			font-style: italic;
			*/
		}
		.attributeLabel
		{
			padding-left: 0px;
			font-size: 10px;
			font-weight: bold;
		}
		.attributeValue
		{
			background-color: red;
			padding-left: 10px;
			font-size: 10px;
		}
		.link
		{
			color: blue; 
			fontFamily: Arial; 
			textRollOverColor: blue;
			font-size: 10px;
		}
	</mx:Style>
	
	<mx:HBox styleName="header" width="100%" minHeight="20" backgroundColor="{ColorUtil.adjustBrightness2(getStyle('themeColor'), 50)}" visible="{Boolean(shortNameText.text != '')}" includeInLayout="{Boolean(shortNameText.text != '')}">
		<mx:Text text="{data.shortName}" id="shortNameText" width="100%" styleName="header" color="#000000" visible="{Boolean(shortNameText.text != '')}" includeInLayout="{Boolean(shortNameText.text != '')}"/>
		<mx:Button label="{lm.labels.common.edit}" visible="{allowModification}" includeInLayout="{allowModification}" click="companyEditHandler(event)/* dispatchEvent(new Event('edit')) */"/>
	</mx:HBox>

	<mx:Text text="{data.fullName}" id="fullNameText" styleName="subHeader" width="100%" visible="{Boolean(fullNameText.text != '')}" includeInLayout="{Boolean(fullNameText.text != '')}" />
	
	<!--
	<mx:VBox width="100%">
	<mx:Repeater id="rp" dataProvider="{data.addresses.*}" styleName="address">
		<mx:VBox verticalGap="0">
			<mx:Text styleName="attributeLabel"
					text="{DictionaryManager.getInstance().dictionaries.getById(rp.currentItem.contractorFieldId).label}"
				/>
			<inputComponents:AddressRenderer width="100%" styleName="address" data="{rp.currentItem}" paddingBottom="0" paddingTop="0"/>
		</mx:VBox>
	</mx:Repeater>
	</mx:VBox>
	-->
	<mx:Form id="attributesForm" verticalGap="0" paddingBottom="0" paddingTop="0" width="100%" >
		
		<mx:Repeater id="rp" dataProvider="{addresses}" styleName="address">
			<mx:FormItem label="{labelFunction(rp.currentItem)}" styleName="attributeLabel" id="rpp">
				<inputComponents:AddressRenderer width="100%" styleName="attributeLabel" data="{rp.currentItem}" paddingBottom="0" paddingTop="0" paddingLeft="0"/>
			</mx:FormItem>
		</mx:Repeater>
		
		<mx:Repeater id="rpa" dataProvider="{data.attributes.*}" visible="{Boolean(rpa.dataProvider.length())}" includeInLayout="{Boolean(rpa.dataProvider.length())}">
			<inputComponents:AttributeRenderer data="{rpa.currentItem}" idField="contractorFieldId" dataChange="rendererDataChange(event)"/>
			<!--
			<mx:HBox>
				<mx:Label styleName="attributeLabel"
						text="{DictionaryManager.getInstance().dictionaries.getById(rpa.currentItem.contractorFieldId).label}"
					/>
				<mx:Label styleName="attributeValue" width="100%" htmlText="{getHTMLText(rpa.currentItem.value)}" selectable="true" link="onLinkClick(event)"/>	
			</mx:HBox>
			-->
		</mx:Repeater>
		
		<mx:FormItem label="{lm.labels.common.nip}" styleName="attributeLabel" visible="{Boolean(nipText.text != '')}" includeInLayout="{Boolean(nipText.text != '')}">
			<mx:Text text="{data.nip}" fontWeight="normal" id="nipText"/>
		</mx:FormItem>
		<mx:FormItem label="{lm.labels.contractors.forms.contractor.accountNumber}" styleName="attributeLabel" visible="{Boolean(accountNumberText.text != '')}" includeInLayout="{Boolean(accountNumberText.text != '')}">
			<mx:Text text="{data.accounts.account.accountNumber}" fontWeight="normal" id="accountNumberText"/>
		</mx:FormItem>
		<mx:FormItem label="{lm.labels.contractors.forms.contractor.creationUser.short}" toolTip="{lm.labels.contractors.forms.contractor.creationUser.full}" styleName="attributeLabel" visible="{Boolean(creationUserText.text != '')}" includeInLayout="{Boolean(creationUserText.text != '')}">
			<mx:Text text="{data.creationUser}" fontWeight="normal" id="creationUserText"/>
		</mx:FormItem>
		<mx:FormItem label="{lm.labels.contractors.forms.contractor.creationDate}" styleName="attributeLabel" visible="{Boolean(creationDateText.text != '')}" includeInLayout="{Boolean(creationDateText.text != '')}">
			<mx:Text text="{(data.creationDate.length() > 0 ? Tools.dateToString(Tools.isoToDate(data.creationDate)) : '')}" fontWeight="normal" id="creationDateText"/>
		</mx:FormItem>
		<mx:FormItem label="{lm.labels.contractors.forms.contractor.modificationUser.short}" toolTip="{lm.labels.contractors.forms.contractor.modificationUser.full}" styleName="attributeLabel" visible="{Boolean(modificationUserText.text != '')}" includeInLayout="{Boolean(modificationUserText.text != '')}">
			<mx:Text text="{data.modificationUser}" fontWeight="normal" id="modificationUserText"/>
		</mx:FormItem>
		<mx:FormItem label="{lm.labels.contractors.forms.contractor.modificationDate}" styleName="attributeLabel" visible="{Boolean(modificationDateText.text != '')}" includeInLayout="{Boolean(modificationDateText.text != '')}">
			<mx:Text text="{(data.modificationDate.length() > 0 ? Tools.dateToString(Tools.isoToDate(data.modificationDate)) : '')}" fontWeight="normal" id="modificationDateText"/>
		</mx:FormItem>
	</mx:Form>
</mx:VBox>
