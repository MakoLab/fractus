<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem implements="com.makolab.components.catalogue.ICatalogueFilter" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%">
	<mx:Script>
		<![CDATA[
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			
			import mx.binding.utils.BindingUtils;
			private var _config:XML
			[Bindable]
			public var columnName:String = "warehouseId";
			
			public function get value():Object
			{
				return warehouse.selectedItem.id.*;
			}
			
			public function set config(value:XML):void
			{
				_config = value;
				if(_config.@labelKey.length())
				{
					var ka:Array=(_config.@labelKey).split('.');
					if(ka.length)
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,ka);
					else
						BindingUtils.bindProperty(this,'label',LanguageManager.getInstance().labels,_config.@labelKey);
				}
				else
				label = _config.@label;
			}
			
			public function get config():XML
			{
				return _config;
			}
			
			public function setParameters(parameters:Object):void
			{
				if(value.toString() != ""){
					if(!parameters.filters)parameters.filters = "";
					var filterNodes:XMLList = parameters.filters.column.(@field == columnName);
					if(filterNodes.length() == 0){
						var newCondition:XML = <column/>;
						newCondition.@field = columnName;
						newCondition.* = value;
						parameters.filters.columns += newCondition;
					}else{
						filterNodes[0].* = value;
					}
				}
			}
			
			private function comboLabelFunction(item:Object):String
			{
				var ret:String = item.label.(@lang == LanguageManager.getInstance().currentLanguage).*; 
				return ret;
			}
			
			private function companyDataProvider():Object
			{
				var all:XML = <entry><id/><label/></entry>;
				all.label.@lang = LanguageManager.getInstance().currentLanguage;
				all.label.(@lang == LanguageManager.getInstance().currentLanguage).* = LanguageManager.getInstance().labels.common.allF;
				var list:XMLList =
					ModelLocator.getInstance().permissionManager.isEnabled('documents.lists.warehouseFilter.external') ?
					DictionaryManager.getInstance().dictionaries.allWarehouses :
					DictionaryManager.getInstance().dictionaries.warehouses;
				var dp:XMLList = all + list; 
				return dp;
			}
			
			public function set template(valueList:XMLList):void{
				for each (var value:XML in valueList){
				//todo: jesli filtr ma rozpoznawac, ktory elem. z listy jest dla niego, trzeba to tu dodać
				
				/*
				<filter value="5D1E6A78-8C69-4079-B9B4-175727EF62E8"/>
				*/
				var objects:Object = warehouse.dataProvider;
				for each(var o:Object in objects){
					if(o.id.* == value.@value){
						warehouse.selectedItem = o;
						break;
					}
				}
				}
			}
			
			public function clear():void{
				if(warehouse.enabled)warehouse.selectedIndex = 0;
			}
			
			public function restore():void{
				//todo
				//trzeba dopisac cialo funkcji, jesli inny filtr ma miec mozliwosc przywracania stanu tego filtra sprzed wyczyszczenia go
				//filtry mogą mieć wpływ na inne filtry poprzez wypelnienie w konfiguracji parametru 'disableFilterType', przyklad w DocNumberFilter
			}
		]]>
	</mx:Script>
		<mx:ComboBox id="warehouse" width="100%" labelField="@label" dataProvider="{companyDataProvider()}" labelFunction="comboLabelFunction"/>
</mx:FormItem>
