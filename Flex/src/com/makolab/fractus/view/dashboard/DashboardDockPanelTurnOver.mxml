<?xml version="1.0" encoding="utf-8"?>
<DockPanel 	xmlns="com.makolab.components.layoutComponents.*" 
			xmlns:mx="http://www.adobe.com/2006/mxml" 
			width="100%" maxHeight="300" height="300"
			xmlns:list="com.makolab.components.list.*" 
			creationComplete="callCommand();" 
			headerColors="[0xe4ff00, 0x819400]" titleStyleName="bold"
			title="{LanguageManager.getInstance().labels.dashboard.TurnOverTitle}" xmlns:filters="com.makolab.fractus.view.documents.reports.filters.*">
			
			<mx:VBox width="100%" height="100%" id="box">
			<mx:HBox>
				
			<mx:FormItem width="50%" label="{LanguageManager.getInstance().labels.common.dateRange}"><filters:DateFilter id="date1" label="{LanguageManager.getInstance().labels.common.dateRange}" parameters="{searchParams}" width="100%"/></mx:FormItem>
			<mx:FormItem width="50%" label="{LanguageManager.getInstance().labels.common.dateRange}"><filters:DateFilter id="date2" label="{LanguageManager.getInstance().labels.common.dateRange}" parameters="{searchParams}" width="100%"/></mx:FormItem>
			</mx:HBox>
			<mx:LinkButton label="{LanguageManager.getInstance().labels.dashboard.filter}" click="searchMe();"/>
			
			<mx:DataGrid id="grid" rowCount="{grid.dataProvider.length>10?10:grid.dataProvider.length}" width="100%" height="100%">		
				
			</mx:DataGrid>
			<mx:LinkButton label="{LanguageManager.getInstance().labels.dashboard.more}" click="goToRaport();"/>
			</mx:VBox>
			
			<mx:Script>
				<![CDATA[
					import com.makolab.fractus.view.documents.reports.financialReports.FinancialReport;
					import com.makolab.fractus.model.LanguageManager;
					import mx.controls.dataGridClasses.DataGridColumn;
					import com.makolab.fractus.model.ModelLocator;
					import com.makolab.fractus.commands.AbstractCommand;
					import com.makolab.components.util.Tools;
					import com.makolab.fractus.view.documents.reports.salesReports.SalesReport;
					import mx.controls.Alert;
					import com.makolab.fractus.commands.ExecuteCustomProcedureCommand;
					import mx.rpc.events.ResultEvent;
					
					private var cmd:ExecuteCustomProcedureCommand;
					private var mod:ModelLocator=ModelLocator.getInstance();
					[Bindable]
					private var searchParams:XML = <searchParams> 
														<dateFrom>2013-02-03</dateFrom>
  <dateTo>2014-02-03T23:59:59.997</dateTo>
  <dateFrom1>2014-01-03</dateFrom1>
  <dateTo1>2014-02-03T23:59:59.997</dateTo1>
  <report>obroty</report>
												   </searchParams>;
					
					private var _config:XMLList;
					public function set config(_c:XMLList):void
					{
						_config=_c;
					}
					private function callCommand():void
					{
						date1.selectedIndex=1;
						date2.selectedIndex=3;
						//var today:Date = new Date();
						//today = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);
						searchParams.dateTo = Tools.dateToString(date1.dateTo) + "T23:59:59.997";
						searchParams.dateFrom = Tools.dateToIso(date1.dateFrom);
						searchParams.dateTo1 = Tools.dateToString(date2.dateTo) + "T23:59:59.997";
						searchParams.dateFrom1 =Tools.dateToIso(date2.dateFrom);
						
						
						cmd = new ExecuteCustomProcedureCommand('reports.p_getDashboard',searchParams);
						cmd.addEventListener(ResultEvent.RESULT,generateReportResult);
						mod.isDashboard=true;
						cmd.execute();
						mod.isDashboard=false;
					}		
					private function searchMe():void
					{
						searchParams.dateTo = Tools.dateToString(date1.dateTo) + "T23:59:59.997";
						searchParams.dateFrom = Tools.dateToIso(date1.dateFrom);
						searchParams.dateTo1 = Tools.dateToString(date2.dateTo) + "T23:59:59.997";
						searchParams.dateFrom1 =Tools.dateToIso(date2.dateFrom);
						
						
						cmd = new ExecuteCustomProcedureCommand('reports.p_getDashboard',searchParams);
						cmd.addEventListener(ResultEvent.RESULT,generateReportResult);
						mod.isDashboard=true;
						cmd.execute();
						mod.isDashboard=false;
					}
					private function generateReportResult(event:ResultEvent):void
					{
						//grid.dataProvider = XML(event.result).*;
						var val:XMLList= XML(event.result).children()[0].children();
						var payementMet:Array=new Array();
						var branchId:Array=new Array();
						var payementLabel:Array=new Array();
						var branchLabel:Array=new Array();
						var labels:Array=new Array();
						var arr:Array=new Array();
						var dgc:DataGridColumn=new DataGridColumn();
						dgc.dataField="PayType";
						dgc.headerText=LanguageManager.getInstance().labels.dashboard.PaymentType;
						labels.push(dgc);
					
						for each(var id:XML in _config.id)
								{
									payementMet.push(id.@val);
									payementLabel.push(id.@label);
								}
						for(var i:int=0;i<val.length();i++)
						{
							
							if(!hasCell(branchId,val[i].@branchID))
								{
									branchId.push(val[i].@branchID);
									branchLabel.push(getBranch(val[i].@branchID.toString()));
									labels.push(new DataGridColumn(branchLabel[branchLabel.length-1]));
								}
						}
						var sum:Number=0;
						var sum1:Number=0;
						var str:Object;
						//trace("labels:",labels);
						grid.columns=labels;
						var payA:Array=[];
						for(var j:int=0;j<payementMet.length;j++)
						{
							//arr.push(new Array());
							payA=String(payementMet[j]).split(",");
							str=new Object();
							str["PayType"]=payementLabel[j];
							for(var k:int=0;k<branchId.length;k++)
							{
									sum=0;
									sum1=0;	
									for(var l:int=0;l<val.length();l++)
									{
										
										for(var m:int=0;m<payA.length;m++)
										{//trace("branch:",branchId[k],val[l].@branchID==branchId[k]
										//," paymet: ",val[l].@label,payA[m],val[l].@label==payA[m]);
										if(val[l].@branchID==branchId[k]&&val[l].@label==payA[m])
										{
											//trace(val[l].@grossValue)
											sum+=Number(val[l].@grossValue);
											sum1+=Number(val[l].@grossValue1);
											//trace("jedziem:",payementLabel[j], l,sum,val[l].@grossValue)
										}
										}
									}
								//trace("branchLabel[k]:",branchLabel[k],sum,sum1)
								if(sum==0&&sum1==0){
									str[branchLabel[k]]="-";
								}else{
									str[branchLabel[k]]=sum.toFixed(2)+" / "+sum1.toFixed(2);
								}
							}	
							arr.push(str);
						}
						
						grid.dataProvider = arr;
					}
					
					protected function getPayement(id_:String):String
					{
						return ModelLocator.getInstance().dictionaryManager.dictionaries.paymentMethod.(id.toString() == id_).label;
					}
					protected function getBranch(id_:String):String
					{
						return ModelLocator.getInstance().dictionaryManager.dictionaries.branches.(id.toString() == id_).label;
					}
					private function hasCell(a:Array,val:String):Boolean
					{
						for(var i:int=0;i<a.length;i++)
						{
							if(a[i]==val) return true;
						}
						return false;
					}
				
					private function goToRaport():void{
						mod.menuManager.showFinanceReports();
					}
				]]>
			</mx:Script>
</DockPanel>
