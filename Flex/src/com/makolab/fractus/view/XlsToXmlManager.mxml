<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas creationComplete="creationCompleteHandler()" xmlns:mx="http://www.adobe.com/2006/mxml" width="800" xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:layoutComponents="com.makolab.components.layoutComponents.*">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.ConfigManager;
			import mx.managers.PopUpManagerChildList;
			import mx.managers.PopUpManager;
			import mx.core.UIComponent;
			import mx.events.MenuEvent;
			import mx.controls.List;
			import com.makolab.components.list.DataGridComboHeader;
			import com.makolab.components.inputComponents.CheckBoxListItemRenderer;
			import mx.controls.CheckBox;
			import mx.events.CloseEvent;
			import mx.containers.GridItem;
			import mx.collections.XMLListCollection;
			import com.makolab.fractus.model.WindowManager;
			import mx.rpc.events.ResultEvent;
			import com.makolab.fractus.commands.items.ItemUpdateCataloguePricesCommand;
			import mx.events.ListEvent;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;
		
			import com.makolab.components.util.LocalFileLoader;
			import com.makolab.fractus.model.ModelLocator;
			import mx.controls.Alert;
			
			private const ERROR_COLOR:uint = 0xffcccc;
			private const IN_COLOR:uint = 0xccffcc;
			private const DEFAULT_COLOR:uint = 0xffffff;
			
			[Bindable]
			private var dataXML:XML = new XML();
			//[Bindable]
			//private var itemsList:Array = [];
			
			public var effectiveRows:XMLList;
			public var window:ComponentWindow;
			public var userConfiguration:Boolean = false;
			[Bindable] public var selectedItems:XMLList;
			[Bindable] private var selectedItemsString:String = "";
			[Bindable] private var selectedItemsCount:int = 0;
			[Bindable] private var progressBarVisibility:Boolean = false;
			[Bindable] private var filePath:String = "";
			private var identifierField:String = "SAP";
			private var netPriceElementName:String = "CENA_NETTO_PLN";
			private var fileRef:FileReference;
			private var keyColumn:DataGridColumn;
			private var valueColumn:DataGridColumn;
			private var configuration:XML;
		
			public static function showWindow():ComponentWindow
			{
				var component:XlsToXmlManager=new XlsToXmlManager();
				var window:ComponentWindow=ComponentWindow.showWindow(component);
				window.title = "Import cen";
				window.buttons = (ComponentWindow.BUTTON_COMMIT | ComponentWindow.BUTTON_CLOSE);
				window.commitButton.label = "Importuj";
				window.commitFunction = component.commitFunction;
				window.closeFunction = component.closeFunction;
				window.xmlButton
				component.window = window;
				return window;
			}
			
			private function creationCompleteHandler():void
			{
				ModelLocator.getInstance().configManager.requestList(["import.itemPrices"],configurationLoaded);
			}
			
			private function configurationLoaded():void
			{
				configuration = ModelLocator.getInstance().configManager.getXMLValue("import.itemPrices");
				if (configuration) userConfiguration = Tools.parseBoolean(configuration.@userConfiguration);
			}
			
			public function commitFunction(forceUpdate:Boolean = false):void
			{
				var selectedList:XMLList = effectiveRows.(valueOf().@enabled == "true");
				if (selectedList.length() > 0)
				{
					var parameter:XML = <root>{selectedList.length() > 0 ? selectedList : ""}</root>;
					parameter.@identifierField = identifierField;
					parameter.@netPriceElementName = netPriceElementName;
					if (forceUpdate) parameter.@forceUpdate = "1";
					var cmd:ItemUpdateCataloguePricesCommand = new ItemUpdateCataloguePricesCommand();
					cmd.addEventListener(ResultEvent.RESULT,handleCommandResult);
					cmd.execute(parameter);
				}
				else
				{
					Alert.show("Nie zaznaczono żadnego towaru","Uwaga");
				}
			}
			
			public function closeFunction():void
			{
				if (window) window.hide();
			}
			
			private function handleCommandResult(event:ResultEvent):void
			{
				var resultXml:XML = XML(event.result);
				var dataGridDataProvider:XMLList = dg.dataProvider.source;
				var item:XML;
				var dataGridItem:XML;
				if (resultXml.updatedItems.length() > 0)
				{
					for each (item in resultXml.updatedItems.item)
					{
						for each (dataGridItem in dataGridDataProvider)
							if (item[identifierField].toString() == dataGridItem[identifierField].toString() && item.@notExists.length() > 0) delete dataGridItem["@notExists"];
					}
				}
				if (resultXml.ignoredItems.length() > 0)
				{
					for each (item in XML(resultXml.ignoredItems).elements())
					{
						for each (dataGridItem in dataGridDataProvider)
							if (item[identifierField].length() > 0 && item[identifierField].toString() == dataGridItem[identifierField].toString()) dataGridItem.@notExists = "1";
					}
				}
				dg.dataProvider = dataGridDataProvider;
				var withForceUpdate:Boolean;
				var cmd:ItemUpdateCataloguePricesCommand = event.target as ItemUpdateCataloguePricesCommand;
				if (cmd.parameter && cmd.parameter.@forceUpdate.length() > 0 && cmd.parameter.@forceUpdate.toString() == "1")
					withForceUpdate = true;
				if (!withForceUpdate && resultXml.ignoredItems.length() > 0 && resultXml.ignoredItems.elements().length() > 0)
				{
					if (resultXml.updatedItems.length() > 0 && resultXml.updatedItems.item.length() > 0)
						Alert.show("Zaznaczone na czerwono towary nie zostay znalezione w kartotece,\nceny nie zostały zaktualizowane.\nCzy zaktualizować pozostałe?\nUWAGA! Zmian nie będzie można cofnąć.","Uwaga",Alert.YES | Alert.NO,null,alertCloseHandler,null,Alert.NO);
					else
						Alert.show("Żaden z towarów nie został znaleziony w kartotece.","Uwaga");
				}
				if ((!withForceUpdate && (resultXml.ignoredItems.length() == 0 || (resultXml.ignoredItems.length() > 0 && resultXml.ignoredItems.elements().length() == 0)))
					|| withForceUpdate)
					if (resultXml.updatedItems.length() > 0 && resultXml.updatedItems.item.length() > 0)
						Alert.show("Wybrane towary zostały zaktualizowane","Aktualizacjia cen");
			}
			
			private function alertCloseHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					commitFunction(true);
			}
			
			private function handleUploadClick(event:MouseEvent):void
			{
				var imageTypes:FileFilter = new FileFilter("Pliki Excel", "*.xls");

				if (!this.fileRef)
				{
					this.fileRef = new FileReference();
					this.fileRef.addEventListener(Event.SELECT, selectHandler);
					this.fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, completeHandler);
					this.fileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, errorHandler);
					this.fileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
				}
				try
				{
				    var success:Boolean = this.fileRef.browse([imageTypes]);
				}
				catch (error:Error)
				{
				    Alert.show("Brak możliwości otwarcia okienka przeglądania plików. Sprawdź ustawienia zabezpieczeń.");
				}
			}
			
			private function errorHandler(event:Event):void
			{
				Alert.show("Wystąpił błąd podczas wysyłania pliku.");
				progressBarVisibility = false;
			}
			
			/* private function getNameList():void
			{
				nameList = [];
				for each(var item:XML in dataXML.*)
				nameList.push(item.name().toString());
			} */
			
			private function completeHandler(event:DataEvent):void
			{
				try
				{
					dataXML = new XML(event.data);
					checkboxList.deselectAll();
					dg.dataProvider = null;
					selectedItems = null;
					selectedItemsString = "";
					
				}
				catch(error:Error)
				{
					Alert.show("Wystąpił błąd podczas przetwarzania pliku","Błąd");
				}
				finally
				{
					progressBarVisibility = false;
				}
				this.filePath = fileRef.name;
				//getNameList();
				
			}
			private function selectHandler(event:Event):void
			{
				//var url:String = "http://127.0.0.1:3131/KernelServices/PrintService" + "/XlsToXml";
			    
				var url:String = ModelLocator.getInstance().configManager.values.services_printService_address.* + "/XlsToXml";
			    var request:URLRequest = new URLRequest(url);
			    //request
			    try
			    {
			        fileRef.upload(request);
			        progressBarVisibility = true;
			    }
			    catch (error:Error)
			    {
			        Alert.show("Wysyłanie pliku nie powiodło się.");
			    }
			}
			
			private function itemSelectHandler(event:ListEvent):void
			{
				var columns:Array = [];
				var dataProvider:XMLList = new XMLList();
				selectedItemsString = "";
				var checkBoxColumn:DataGridColumn = new DataGridColumn();
				checkBoxColumn.dataField = "@enabled";
				var factory:ClassFactory = new ClassFactory(CheckBoxListItemRenderer);
				factory.properties = {dataField : "@enabled", visibilityFunction : checkBoxVisibilityFunction};
				checkBoxColumn.itemRenderer = factory;
				checkBoxColumn.width = 30;
				checkBoxColumn.setStyle("textAlign","center");
				checkBoxColumn.headerText = "";
				columns.push(checkBoxColumn);
				
				
				for each (var item:Object in checkboxList.selectedItems)
				{
					var rows:XMLList = XML(item).elements("Row");
					for each (var row:XML in rows)
					{
						for each (var field:XML in row.elements())
						{
							var fieldExists:Boolean = false;
							for (var i:int = 0; i < columns.length; i++)
							{
								if (field.localName().toString() == columns[i].dataField)
									fieldExists = true;
							}
							if (!fieldExists)
							{
								var column:DataGridColumn = new DataGridColumn();
								if (userConfiguration)
								{
									var popUpFactory:ClassFactory = new ClassFactory(List);
									popUpFactory.properties = {rowCount : 2, dataProvider : [{label : "klucz", value : field.localName().toString()},{label : "wartość", value : field.localName().toString()}]};
									var headerFactory:ClassFactory = new ClassFactory(DataGridComboHeader);
									var events:Array = [{type : MenuEvent.ITEM_CLICK, listener : columnPopUpEventListener}];
									headerFactory.properties = {popUpFactory : popUpFactory, events : events};
									column.headerRenderer = headerFactory;
								}
								column.dataField = field.localName().toString();
								columns.push(column);
							}
						}
						row.@enabled = "true";
					}
					
					dataProvider += rows;
					selectedItemsString += XML(item).toXMLString() + "\n";
				}
				selectedItems = dataProvider;
				effectiveRows = dataProvider.(valueOf()[identifierField].length() > 0);
				selectedItemsCount = effectiveRows.length();
				
				dg.columns = columns;
				dg.dataProvider = dataProvider;
				
			}
			private function itemCheckHandler(event:ListEvent=null):void
			{
				var sum:int=0;
				var dataProvider:XMLList = new XMLList();
				for each (var item:Object in checkboxList.selectedItems)
				{
					var rows:XMLList = XML(item).elements("Row");
					for each (var row:XML in rows)
					{
						if (row.hasOwnProperty('@enabled'))
						if (row.(@enabled==true))
									{sum++;
								
									trace(row.@enabled);}
							
						
					}
			
				}
				if(selectedItems)
				effectiveRows=selectedItems.(hasOwnProperty('@enabled') && @enabled==true);
				selectedItemsCount = sum
			}
			private function columnPopUpEventListener(event:Event):void
			{
				
				var column:DataGridColumn;
				var selectedItem:Object = event.target.dataProvider[(event as ListEvent).rowIndex];
				for (var i:int = 0; i < dg.columns.length; i++)
				{
					if (dg.columns[i].dataField == selectedItem.value)
						column = dg.columns[i];
				}
				column.headerText = column.dataField + " (" + selectedItem.label + ")";
				if (selectedItem.label == "klucz" && keyColumn) keyColumn.headerText = keyColumn.dataField;
				if (selectedItem.label == "wartość" && valueColumn) valueColumn.headerText = valueColumn.dataField;
				if (selectedItem.label == "klucz" && column) 
				{
					keyColumn = column;
					identifierField = column.dataField;
					if (valueColumn == column) valueColumn = null;
				}
				if (selectedItem.label == "wartość" && column) 
				{
					valueColumn = column;
					netPriceElementName = column.dataField;
					if (keyColumn == column) keyColumn = null;
				}
				//qla
//				var sum:int=0;
//		
//				var rows:XMLList = XML(item).elements("Row");
//					for each (var row:XML in rows)
//					{
//				if(row(@enabled=true))
//				sum++;
//					}
//				selectedItemsCount = sum;
//
if(!checkboxList.hasEventListener(CheckBoxList.ITEM_CHECK))
					checkboxList.addEventListener(CheckBoxList.ITEM_CHECK,itemCheckHandler);
					itemCheckHandler();
			}
			
			private function checkBoxVisibilityFunction(item:Object):Boolean
			{
				return (item && item[identifierField].length() > 0) ? true : false;
			}
			
			private function listLabelFunction(item:Object):String
			{
				return XML(item).localName().toString();
			}
			
			private function rowColorFunction(item:Object):Number
			{
				if(item == null) return DEFAULT_COLOR;
				return (item.@notExists.length() > 0 && item.@notExists.toString() == "1") ? ERROR_COLOR : DEFAULT_COLOR;
			}
		
		]]>
	</mx:Script>
	<mx:VDividedBox width="100%" height="100%">
		<mx:Canvas width="100%" height="100%">
			<mx:Button x="10" y="10" label="Wczytaj plik" click="{handleUploadClick(event)}" width="200"/>
			<!--mx:ComboBox id="cb" dataProvider="{nameList}" x="114" y="10" change="{cdChange(event)}" width="199"/-->
			<mx:Text text="{filePath}" x="220" y="10" width="200"/>
			<layoutComponents:ExtendedDataGrid id="dg" left="430" right="10" bottom="24" top="10" rowColorFunction="rowColorFunction"/>
			<mx:FormItem label="Suma" left="430" bottom="0">
				<mx:Label text="{selectedItemsCount}"/>
			</mx:FormItem>
			<mx:Label text="Wybierz arkusze do zaimportowania:" left="10" top="40" width="420"/>
			<inputComponents:CheckBoxList id="checkboxList" top="64" width="420" bottom="0" dataProvider="{dataXML.elements()}" change="itemSelectHandler(event)" labelFunction="listLabelFunction"/>
		</mx:Canvas>
		<mx:TextArea width="100%" height="100%" text="{selectedItemsString}"/>
	</mx:VDividedBox>
	<mx:Canvas id="progressBar" x="0" y="0" width="100%" height="100%" backgroundColor="0x000000" backgroundAlpha="0.2" visible="{progressBarVisibility}" includeInLayout="{progressBarVisibility}">
		<mx:ProgressBar label="Konwertowanie pliku, proszę czekać." indeterminate="true" verticalCenter="0" horizontalCenter="0" visible="{progressBarVisibility}"/>
		<!--<mx:Button label="Anuluj" click="cancelCommand()" verticalCenter="30" horizontalCenter="0"/>-->
	</mx:Canvas>
</mx:Canvas>
