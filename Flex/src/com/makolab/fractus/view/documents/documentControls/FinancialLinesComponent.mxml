<?xml version="1.0" encoding="utf-8"?>
<AbstractLinesComponent creationComplete="onCreationComplete()" xmlns="com.makolab.fractus.view.documents.documentControls.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:lineList="com.makolab.components.lineList.*">
	<columns>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.lp}" minWidth="20" width="30" editable="false" itemRenderer="com.makolab.components.inputComponents.OrdinalNumberRenderer"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.description}" dataField="description" minWidth="20" editable="true"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.documents.amount}" dataField="amount" width="120" headerWordWrap="true" editorDataField="dataObject" itemEditor="com.makolab.components.inputComponents.CurrencyEditor" itemRenderer="com.makolab.components.inputComponents.CurrencyRenderer" headerStyleName="headerRight"/>
		<mx:DataGridColumn headerText="" dataField="amount" width="30" editable="false" itemRenderer="com.makolab.fractus.view.documents.documentControls.RelatedPaymentsRenderer"/>
		<mx:DataGridColumn headerText="" minWidth="20" width="35" editable="false">
			<mx:itemRenderer>
				<mx:Component>
					<lineList:LineMenu enabled="{!outerDocument.disableLinesChangeMessage/* &amp;&amp; deleteOperation.line.amount &gt; 0*/}">
						<lineList:operations>
							<lineList:LineOperation label="{LanguageManager.getInstance().labels.common.Delete}" id="deleteOperation" enabled="{outerDocument.isNewLine(deleteOperation.line)}" operationInvoke="outerDocument.lineListDeleteLine(event)" icon="{outerDocument.getIcon('delete_small')}" textAlign="left"/>
							<lineList:LineOperation label="{LanguageManager.getInstance().labels.common.duplicate}" operationInvoke="outerDocument.lineListDuplicateLine(event)" icon="{outerDocument.getIcon('duplicate_small')}" textAlign="left"/>
							<lineList:LineOperation label="{LanguageManager.getInstance().labels.common.addNewF}" operationInvoke="outerDocument.lineListAddNewLine(event)" icon="{outerDocument.getIcon('add_small')}" textAlign="left"/>
						</lineList:operations>
						<mx:Script>
							<![CDATA[
								import com.makolab.fractus.model.LanguageManager;
							]]>
						</mx:Script>
					</lineList:LineMenu>
				</mx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
	</columns>
	<mx:Script>
		<![CDATA[
			import com.makolab.fractus.model.LanguageManager;
			import mx.events.DataGridEvent;
			import com.makolab.components.util.Tools;
			import com.makolab.components.document.DocumentEvent;
			import com.makolab.fractus.model.document.FinancialDocumentLine;
			import com.makolab.fractus.model.document.DocumentObject;
			
			private function onCreationComplete():void
			{
				this.documentLines.addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, this.onItemEditBegin, false, 0, true);
			}
			
			private function onItemEditBegin(event:DataGridEvent):void
			{
				var line:FinancialDocumentLine = this.documentLines.dataProvider[event.rowIndex];
				
				if(line.amount < 0)
				{
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			}
			
			public function addLineWithSalesOrder(description:String, salesOrderId:String):FinancialDocumentLine
			{
				var line:FinancialDocumentLine = super.getEmptyLine() as FinancialDocumentLine;
				line.description = description;
				line.salesOrderId = salesOrderId;
				
				this.documentObject.dispatchEvent(new DocumentEvent(DocumentEvent.DOCUMENT_LINE_ADD, false, false, null, line));
				return line;
			}
			
			public function addSettlingLine(description:String, amount:Number, settledPaymentId:String):FinancialDocumentLine
			{
				var line:FinancialDocumentLine = super.getEmptyLine() as FinancialDocumentLine;
				line.amount = amount;
				line.description = description;
				if (line.additionalNodes.settlements.length() == 0) line.additionalNodes += <settlements/>;
				line.additionalNodes.settlements +=
					<settlement><relatedPayment><payment><id>{settledPaymentId}</id></payment></relatedPayment></settlement>;
				this.documentObject.dispatchEvent(new DocumentEvent(DocumentEvent.DOCUMENT_LINE_CHANGE, false, false, 'amount', line));
				return line;
			}
			
			public function isNewLine(line:Object):Boolean
			{
				var ret:Boolean;
				ret = line.hasOwnProperty("id") && line.id != null;
				return !ret;
			}
		]]>
	</mx:Script>

</AbstractLinesComponent>