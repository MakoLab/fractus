<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:generic="com.makolab.fractus.view.generic.*" xmlns:layoutComponents="com.makolab.components.layoutComponents.*"
		paddingTop="4"
		paddingBottom="4"
		paddingLeft="4"
		paddingRight="4"
		verticalGap="0"
	xmlns:inputComponents="com.makolab.components.inputComponents.*" xmlns:filters="com.makolab.fractus.view.documents.reports.filters.*">
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.view.generic.DocumentStatusRenderer;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			import com.makolab.fractus.commands.SearchCommand;
			import mx.rpc.events.ResultEvent;
			import com.makolab.fractus.view.ComponentWindow;
			import com.makolab.fractus.model.LanguageManager;
			protected var window:ComponentWindow;
			
			public static function showWindow():ComponentWindow
			{
				var component:DocumentsExportComponent = new DocumentsExportComponent();
				var window:ComponentWindow = ComponentWindow.showWindow(component, 0, null, LanguageManager.getInstance().labels.accounting.exportDocuments);
				component.window = window;
				return window;
			}
			
			public function handleExportResultAndFault(event:Event):void
			{
				this.search();
			}
			
			public function search():void
			{
				exportComponent.list = new XMLList();
				
				var ccmd:SearchCommand = new SearchCommand(SearchCommand.DOCUMENTS, cSearchParams);
				var wcmd:SearchCommand = new SearchCommand(SearchCommand.DOCUMENTS, wSearchParams);
				var fcmd:SearchCommand = new SearchCommand(SearchCommand.DOCUMENTS, fSearchParams);
				
				this.dateFilter.setParameters(ccmd.searchParams);
				this.dateFilter.setParameters(wcmd.searchParams);
				this.dateFilter.setParameters(fcmd.searchParams);

				ccmd.query = queryInput.text;
				wcmd.query = queryInput.text;
				fcmd.query = queryInput.text;
				
				if (cbExported.selectedIndex > 0)
				{
					//var exportedFilter:String = String(cbExported.selectedIndex == 1 ? 1 : 0);
					var exportedFilter:String = cbExported.selectedItem.value;
					ccmd.addFilter('objectExported', exportedFilter);
					wcmd.addFilter('objectExported', exportedFilter);
					fcmd.addFilter('objectExported', exportedFilter);
				}
				
				if(this.registerSelector.selectedIds.length > 0)
				{
					//fcmd.searchParams.appendChild(<filters><column field="financialRegisterId">{this.registerSelector.selectedItem.id.*}</column></filters>);
					fcmd.addFilter("financialRegisterId", this.registerSelector.selectedIds.join(","));
				}
				
				if(cbDecree.selectedIndex > 0)
				{
					var val:String = cbDecree.selectedItem.value;
					ccmd.addFilter('hasDecree', val);
					wcmd.addFilter('hasDecree', val);
					fcmd.addFilter('hasDecree', val);
				}
				
				var statuses:Array = this.docStatusFilter.status.selectedItems;
				
				if(statuses.length < 4)
				{
					var str:String = "";
					
					for each(var x:XML in statuses)
					{
						if(str != "")
							str += ",";
							
						str += String(x.value);
					}
					//
					if(str == "") return;
					
					ccmd.addFilter("status", str);
					wcmd.addFilter("status", str);
					fcmd.addFilter("status", str);
				}

				ccmd.addEventListener(ResultEvent.RESULT, handleResult);
				wcmd.addEventListener(ResultEvent.RESULT, handleResult);
				fcmd.addEventListener(ResultEvent.RESULT, handleResult);
				
				if (dtfCommercial.combo.selectedItems && dtfCommercial.combo.selectedItems.length > 0) ccmd.execute();
				if (dtfWarehouse.combo.selectedItems && dtfWarehouse.combo.selectedItems.length > 0) wcmd.execute();
				if(this.registerSelector.selectedIds.length > 0) fcmd.execute();
			}
			
			private function handleResult(event:ResultEvent):void
			{
				var l:XMLList = XML(event.result).*;
				if (l.length() > 0 && l[0].localName() == 'financialReport')
				{		
					//qla tfs job 2763 wstawic eksport raportw z zerowymi wartosciami 
					//l = l.(Number(@incomeAmount) != 0 || Number(@outcomeAmount) != 0);
					
					for each (var x:XML in l)
					{
						x.@issueDate = String(x.@closureDate);
						//x.@status = 40;
						x.@documentTypeId = 'financialReport';
						
						if(x.hasOwnProperty('@initialBalance') && x.hasOwnProperty('@incomeAmount') && x.hasOwnProperty('@outcomeAmount')) {
							x.@grossValue = String( Number(x.@initialBalance) + Number(x.@incomeAmount) + Number(x.@outcomeAmount) );
						}
					}
				}
				exportComponent.list += l;
			}

			private function getDocumentLabel(item:Object):String
			{
				var documentType:String = item.@documentTypeId;
				var typeLabel:String;
				if (documentType == 'financialReport') typeLabel = LanguageManager.getInstance().labels.finance.reportShort;
				else typeLabel = DictionaryManager.getInstance().getById(documentType).symbol;
				return String(typeLabel +  " " + item.@fullNumber);
			}
			
			private function getTaskParams(id:String):XMLList
			{
				var retList:XMLList = new XMLList();
				
				if(this.chkBoxDekretujEnabled.selected)
					retList += <createAccountingEntries accountingRuleId={this.accountingRuleId.selectedId} />;
					
				if(!this.chkBoxExportEnabled.selected)
					retList += <disableExport/>;
				
				if (!exportComponent.list) return null;
				var item:XMLList = exportComponent.list.(@id == id);
				if (item.length() == 0) return null;
				
				var documentType:String = item[0].@documentTypeId;
				if (documentType == 'financialReport')
					retList += XMLList(<financialReportId>{id}</financialReportId>);
				else
				{
					var dtd:DocumentTypeDescriptor = new DocumentTypeDescriptor(documentType);
					if (dtd.documentCategory == DocumentTypeDescriptor.WAREHOUSE_DOCUMENT)
						retList += XMLList(<warehouseDocumentId>{id}</warehouseDocumentId>);
					else if (dtd.documentCategory == DocumentTypeDescriptor.COMMERCIAL_DOCUMENT)
						retList += XMLList(<commercialDocumentId>{id}</commercialDocumentId>);
					else return null;
				}
				
				if(this.chkBoxUnbookEnabled.selected)
				{
					retList += <procedureName>accounting.p_unbookDocument</procedureName>;
					retList += <hasResult>false</hasResult>;
				}
				
				return retList;
			}
			
			private function getDocumentTypeList(categories:String):XMLList
			{
				var list:Array = categories.split(",");
				var xmlList:XMLList = new XMLList();
				for(var i:int=0;i<list.length;i++){
					if(!isNaN(Number(list[i])))xmlList = xmlList + DictionaryManager.getInstance().dictionaries.documentTypes.(documentCategory.toString() == list[i]);
				}
				return xmlList;
			}
			
			private function getRegistersDataProvider(dictionary:XMLList):XMLList
			{
				var all:XML = <entry><id>0</id><label lang="pl">Wszystkie</label><label lang="en">All</label></entry>;
				var none:XML = <entry><id>-1</id><label lang="pl">Å»aden</label><label lang="en">None</label></entry>
				
				return all + none + dictionary;
			}
			
			private function exportButtonLabelFunction(chkBoxDekretujEnabled:Boolean, chkBoxExportEnabled:Boolean, chkBoxUnbookEnabled:Boolean):String
			{
				if(chkBoxDekretujEnabled && chkBoxExportEnabled)
					return LanguageManager.getInstance().labels.common.doDecreesAndExport;
				else if(chkBoxDekretujEnabled)
					return LanguageManager.getInstance().labels.common.doDecrees;
				else if(chkBoxExportEnabled)
					return LanguageManager.getInstance().labels.common.export;
				else if (chkBoxUnbookEnabled)
					return LanguageManager.getInstance().labels.common.erase;
				else
					return "["+LanguageManager.getInstance().labels.common.chooseOperation+"]";
			}
			
			private function exportButtonEnabledFunction(chkBoxDekretujEnabled:Boolean, chkBoxExportEnabled:Boolean, chkBoxUnbookEnabled:Boolean):Boolean
			{
				if(!chkBoxDekretujEnabled && !chkBoxExportEnabled && !chkBoxUnbookEnabled)
					return false;
				else
					return true;
			}
			
			private function chkBoxOperationChange(event:Event):void
			{
				if(event.target == this.chkBoxUnbookEnabled && this.chkBoxUnbookEnabled.selected)
				{
					this.chkBoxDekretujEnabled.selected = false;
					this.chkBoxExportEnabled.selected = false;
				}
				else
					this.chkBoxUnbookEnabled.selected = false;
			}
		]]>
	</mx:Script>
	<mx:HBox horizontalGap="20" verticalGap="0">
		<mx:VBox horizontalGap="0" verticalGap="0" width="50%">
			<mx:Form horizontalGap="0" paddingBottom="0" paddingTop="0" width="100%">
				<mx:FormItem label="{LanguageManager.getInstance().labels.common.searchInIndex}" horizontalGap="0" width="100%">
					<mx:TextInput id="queryInput" width="100%" enter="search()"/>
				</mx:FormItem>
				<!--<mx:FormItem label="{LanguageManager.getInstance().labels.common.filterResults}">
					<mx:ComboBox id="cbExported" dataProvider="{['Wszystkie', 'Wyeksportowane', 'Niewyeksportowane']}" selectedIndex="2"/>
				</mx:FormItem>-->
				<mx:FormItem label="{LanguageManager.getInstance().labels.common.filterResults}" horizontalGap="0" width="100%">
					<mx:ComboBox labelField="label" width="100%" id="cbExported" dataProvider="{[ { label : LanguageManager.getInstance().labels.common.allF, value : 'all' }, { label : LanguageManager.getInstance().labels.filters.exportedAndChanged, value : 'exportedAndChanged' }, { label : LanguageManager.getInstance().labels.filters.exportedAndUnchanged, value : 'exportedAndUnchanged' }, { label : LanguageManager.getInstance().labels.filters.unexported, value : 'unexported' }, { label : LanguageManager.getInstance().labels.filters.exportedWithErrors, value : 'exportedWithErrors' }]}" selectedIndex="3"/>
				</mx:FormItem>
				<mx:FormItem label="{LanguageManager.getInstance().labels.common.decrees}" horizontalGap="0" width="100%">
					<mx:ComboBox labelField="label" width="100%" id="cbDecree" dataProvider="{[ { label : LanguageManager.getInstance().labels.common.allF, value : 'all' }, { label : LanguageManager.getInstance().labels.common.decreesed, value : '1' }, { label : LanguageManager.getInstance().labels.common.notDecreesed, value : '0' }]}" selectedIndex="0"/>
				</mx:FormItem>
				<mx:FormItem label="{LanguageManager.getInstance().labels.documents.issueDate}" horizontalGap="0" width="100%">
					<inputComponents:DateFilter id="dateFilter" width="100%"/>
				</mx:FormItem>
			</mx:Form>
			
		</mx:VBox>
		<mx:VBox horizontalGap="0" verticalGap="0" width="50%">
			<mx:Form horizontalGap="0" paddingBottom="0" paddingTop="0" width="100%">
				<filters:DocumentTypeFilter selectAllOnStartup="false" parameters="{cSearchParams}" id="dtfCommercial" label="{LanguageManager.getInstance().labels.documents.documentsCommercial}" itemsList="{getDocumentTypeList('0,2,5,6')}" escapeValues="true" width="100%" />
				<filters:DocumentTypeFilter selectAllOnStartup="false" parameters="{wSearchParams}" id="dtfWarehouse" label="{LanguageManager.getInstance().labels.documents.documentsWarehouse}" itemsList="{getDocumentTypeList('1,7,8')}" escapeValues="true" width="100%" />
				<mx:FormItem label="{LanguageManager.getInstance().labels.documents.documentsFinancial}" width="100%">
					<generic:FinancialRegisterMultiSelector id="registerSelector" showExternalRegisters="{ModelLocator.getInstance().headquarters}" dataProvider="{DictionaryManager.getInstance().dictionaries.financialRegisters}" width="100%"/>
				</mx:FormItem>
				<inputComponents:DocStatusFilter id="docStatusFilter" label="{LanguageManager.getInstance().labels.dictionaries.documentsStatus}" width="100%" defaultStatuses="{[20, 40]}" />
				<mx:FormItem label="{LanguageManager.getInstance().labels.lists.operationsTitle}" width="100%">
				<mx:HBox width="100%" horizontalGap="17">
					<mx:CheckBox id="chkBoxExportEnabled" label="{LanguageManager.getInstance().labels.common.export}" selected="true" change="chkBoxOperationChange(event)"/>
					<mx:CheckBox id="chkBoxDekretujEnabled" label="{LanguageManager.getInstance().labels.common.doDecrees}" selected="true" change="chkBoxOperationChange(event)"/>
					<mx:CheckBox id="chkBoxUnbookEnabled" label="{LanguageManager.getInstance().labels.common.erase}" selected="false" change="chkBoxOperationChange(event)"/>
					<generic:FractusDictionarySelector id="accountingRuleId" dictionaryName="accountingRules" enabled="{chkBoxDekretujEnabled.selected}" />
				</mx:HBox>
			</mx:FormItem>
			<mx:FormItem width="100%" horizontalAlign="right">
				<mx:Button width="100" label="{LanguageManager.getInstance().labels.common.search2}" click="search()" verticalGap="0" paddingBottom="0" paddingTop="0"/>
			</mx:FormItem>
			</mx:Form>
		</mx:VBox>

	</mx:HBox>
	
	
	
	
	<generic:ObjectExportComponent exportButtonEnabled="{exportButtonEnabledFunction(this.chkBoxDekretujEnabled.selected, this.chkBoxExportEnabled.selected, this.chkBoxUnbookEnabled.selected)}" 
									exportButtonLabel="{this.exportButtonLabelFunction(this.chkBoxDekretujEnabled.selected, this.chkBoxExportEnabled.selected, this.chkBoxUnbookEnabled.selected)}" 
									id="exportComponent"
									itemLabelFunction="{getDocumentLabel}"
									taskParamsFunction="{getTaskParams}"
									width="100%" height="100%"
									processingCompleted="handleExportResultAndFault(event)" minHeight="10">
		<generic:columns>
			<mx:DataGridColumn headerText="" dataField="@status" editable="false" width="30" itemRenderer="com.makolab.fractus.view.generic.DocumentStatusRenderer"/>
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.documents.type}" dataField="@documentTypeId" editable="false" width="80" itemRenderer="com.makolab.fractus.view.generic.DocumentTypeRenderer"/>
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.number}" dataField="@fullNumber" editable="false" width="85"/> 
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.date}" dataField="@issueDate" editable="false" width="85" itemRenderer="com.makolab.components.inputComponents.DateRenderer"/>
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.contractors.contractor}" dataField="@contractorShortName" editable="false"/>
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.value}" dataField="@grossValue" itemRenderer="com.makolab.components.inputComponents.CurrencyRenderer" editable="false" width="100" />
			<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.currency}" dataField="@documentCurrencyId" itemRenderer="com.makolab.fractus.view.generic.FractusDictionaryRenderer" editable="false" width="50" />
		</generic:columns>
	</generic:ObjectExportComponent>
	
	<!-- TODO: zastosowanie filtra kategorii zamiast listy typow jak Czarek zaimplementuje to po swojej stronie -->
	<mx:XML id="cSearchParams">
		<searchParams type="CommercialDocument">
		  <pageSize>100000000</pageSize>
		  <page>1</page>
		  <columns>
		    <column field="documentTypeId" column="documentTypeId"/>
		    <column field="status" column="status"/>
		    <column field="fullNumber"/>
		    <column field="issueDate" sortOrder="1" sortType="ASC"/>
		    <column field="contractorShortName" column="shortName" relatedObject="contractor"/>
		    <column field="objectExported"/>
		    <column field="grossValue" />
      		<column field="documentCurrencyId" labelKey="documentCurrencyId" />
		  </columns>
		  <query/>
		  <filters/>
		  <groups/>
		</searchParams>
	</mx:XML>
	
	<mx:XML id="wSearchParams">
		<searchParams type="WarehouseDocument">
		  <pageSize>100000000</pageSize>
		  <page>1</page>
		  <columns>
		    <column field="documentTypeId" column="documentTypeId"/>
		    <column field="status" column="status"/>
		    <column field="fullNumber"/>
		    <column field="issueDate" sortOrder="1" sortType="ASC"/>
		    <column field="contractorShortName" column="shortName" relatedObject="contractor"/>
		    <column field="objectExported"/>
		    <column field="grossValue" />
		    <column field="amount" />
      		<column field="documentCurrencyId" labelKey="documentCurrencyId" />
		  </columns>
		  <query/>
		  <groups/>
		</searchParams>
	</mx:XML>
	
	<mx:XML id="fSearchParams">
		<searchParams type="FinancialReport">
		  <pageSize>100000000</pageSize>
		  <page>1</page>
		  <columns>
		    <column field="fullNumber"/>
		    <column field="status" column="status"/>
		    <column field="closureDate" column="closureDate" sortOrder="1" sortType="ASC"/>
		    <column field="objectExported"/>
		    <column field="initialBalance" />
		    <column field="incomeAmount" />
		    <column field="outcomeAmount" />
      		<column field="documentCurrencyId" labelKey="documentCurrencyId" />
		  </columns>
		  <query/>
		  <groups/>
		  <sqlConditions>
		    <condition>closureDate IS NOT NULL</condition>
		  </sqlConditions>
		</searchParams>
	</mx:XML>
</mx:VBox>
