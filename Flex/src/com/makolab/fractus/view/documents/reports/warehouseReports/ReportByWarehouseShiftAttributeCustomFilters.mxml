<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" horizontalGap="0" paddingBottom="0" paddingTop="0" paddingLeft="5"
	implements="com.makolab.fractus.view.documents.reports.ICustomReportFilter" xmlns:inputComponents="com.makolab.components.inputComponents.*">
	<mx:Script>
		<![CDATA[
			[Bindable] private var voltageFirst:Number = 12.5;
			[Bindable] private var voltageSecond:Number = 12.6;
			[Bindable] private var currentFirst:Number = 0.8;
			[Bindable] private var currentSecond:Number = 0.9;
			[Bindable] private var measureTimeFirst:Number = 90;
			[Bindable] private var measureTimeSecond:Number = 60;
			
			public function getSearchParams():XML
			{
				var xml:XML = <searchParams/>
				
				if(this.chkBoxVoltage.selected)
					xml.appendChild(<voltage period1={this.voltageFirst.toString()} period2={this.voltageSecond.toString()} />);
				
				if(this.chkBoxCurrent.selected)
					xml.appendChild(<current period1={this.currentFirst.toString()} period2={this.currentSecond.toString()} />);
				
				if(this.chkBoxMeasureTime.selected)
					xml.appendChild(<measureTime period1={this.measureTimeFirst.toString()} period2={this.measureTimeSecond.toString()} />);
				
				return xml;
			}
			
			private function formatNumber(number:Number):String
			{
				return number.toString().replace(".", ",");
			}
			
			private function numberFocusOutHandler(sender:TextInput, oldValVariableName:String):void
			{
				var newVal:String = sender.text.replace(',', '.'); 
				var regExp:Array = newVal.match(/^[0-9]+[,.]?[0-9]{0,2}$/);				
				
				if(regExp == null || regExp.length == 0)
					sender.text = this.formatNumber(Number(this[oldValVariableName])); //wracamy do starej wartosci
				else //nowa wartosc poprawna
				{
					var isIncorrect:Boolean = false;
					
					//sprawdzamy czy spelnia reguly walidacyjne
					if (oldValVariableName == "voltageFirst" && parseFloat(newVal) >= this.voltageSecond)
						isIncorrect = true;
					else if (oldValVariableName == "voltageSecond" && parseFloat(newVal) <= this.voltageFirst)
						isIncorrect = true;
					else if (oldValVariableName == "currentFirst" && parseFloat(newVal) >= this.currentSecond)
						isIncorrect = true;
					else if (oldValVariableName == "currentSecond" && parseFloat(newVal) <= this.currentFirst)
						isIncorrect = true;
					else if (oldValVariableName == "measureTimeFirst" && parseFloat(newVal) <= this.measureTimeSecond)
						isIncorrect = true;
					else if (oldValVariableName == "measureTimeSecond" && parseFloat(newVal) >= this.measureTimeFirst)
						isIncorrect = true;
							
					if(isIncorrect)
						sender.text = this.formatNumber(Number(this[oldValVariableName])); //wracamy do starej wartosci
					else
						this[oldValVariableName] = parseFloat(newVal); //nowa wartosc jest ok
				}
			}
		]]>
	</mx:Script>
	<mx:HBox>
		<mx:CheckBox id="chkBoxVoltage" selected="true" />
		<mx:Label text="Napięcie" />
		<mx:TextInput id="txtBoxVoltageFirst" enabled="{chkBoxVoltage.selected}" text="{this.formatNumber(this.voltageFirst)}" restrict="0-9,." maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxVoltageFirst, 'voltageFirst')"/>
		<mx:TextInput id="txtBoxVoltageSecond" enabled="{chkBoxVoltage.selected}" text="{this.formatNumber(this.voltageSecond)}" restrict="0-9,." maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxVoltageSecond, 'voltageSecond')"/>
	</mx:HBox>
	<mx:HBox>
		<mx:CheckBox id="chkBoxCurrent" selected="true" />
		<mx:Label text="Natężenie" />
		<mx:TextInput id="txtBoxCurrentFirst" enabled="{chkBoxCurrent.selected}" text="{this.formatNumber(this.currentFirst)}" restrict="0-9,." maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxCurrentFirst, 'currentFirst')"/>
		<mx:TextInput id="txtBoxCurrentSecond" enabled="{chkBoxCurrent.selected}" text="{this.formatNumber(this.currentSecond)}" restrict="0-9,." maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxCurrentSecond, 'currentSecond')"/>
	</mx:HBox>
	<mx:HBox>
		<mx:CheckBox id="chkBoxMeasureTime" selected="true" />
		<mx:Label text="Czas pomiaru" />
		<mx:TextInput id="txtBoxMeasureTimeFirst" enabled="{chkBoxMeasureTime.selected}" text="{this.formatNumber(this.measureTimeFirst)}" restrict="0-9" maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxMeasureTimeFirst, 'measureTimeFirst')"/>
		<mx:TextInput id="txtBoxMeasureTimeSecond" enabled="{chkBoxMeasureTime.selected}" text="{this.formatNumber(this.measureTimeSecond)}" restrict="0-9" maxChars="5" width="50" focusOut="this.numberFocusOutHandler(this.txtBoxMeasureTimeSecond, 'measureTimeSecond')"/>
	</mx:HBox>
</mx:VBox>
