<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" change="changeHandler()">
	<mx:Script>
		<![CDATA[
			import com.makolab.components.catalogue.FilterClassMapper;
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.ConfigManager;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.view.documents.reports.filters.IReportFilter;
			
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedClassName;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import flight.binding.Bind;
			import flight.utils.Type;
			import flight.utils.getClassName;
			import flight.utils.getType;
			
			protected function init():void
			{
				if (configurationName) ModelLocator.getInstance().configManager.requestList(["reports.definition"], applyConfiguration);
			}
			
			/**
			 * Specifies report name set in reports definition in configuration.
			 */
			public var configurationName:String;
			[Bindable]
			public var reportsName:String;
			
			[Bindable]
			public var defaultSearchParams:XML;
			
			private var _filtersComponent:DisplayObject;
			
			public function set filtersComponent(component:DisplayObject):void
			{
				if (_filtersComponent) this.removeChild(_filtersComponent);
				if (component is IReportFiltersComponent) _filtersComponent = component;
				else throw new Error("filtersComponent must implement IReportFiltersComponent.");
				if (_filtersComponent) this.addChildAt(_filtersComponent,0);
			}
			
			public function get filtersComponent():DisplayObject
			{
				return _filtersComponent;
			}
			
			private function applyConfiguration():void
			{
				var model:ModelLocator = ModelLocator.getInstance();
				model.configManager.requestValue("reports.definition");
				var configuration:XML = model.configManager.getXMLValue("reports.definition");
				if (configuration && configurationName)
				{
					// tworzenie filtrow dynamicznych
					if (configuration[configurationName].filters.length() > 0)
					{
						var filtersArray:Array = [];
						for each (var filterConfig:XML in configuration[configurationName].filters.filter)
						{
							var filterComponent:DisplayObject = createCustomFilter(filterConfig);
							if (filterComponent) filtersArray.push(filterComponent);
						}
						(filtersComponent as IReportFiltersComponent).customFilters = filtersArray; 
					}
					// tworzenie raportow.
					for each(var x:XML in configuration[configurationName].report)
					{
						
						
						var rg:ReportGenerator = new ReportGenerator();
						rg.procedure = x.@procedure;
						if(x.labels.length())
						{
							rg.label = x.labels.label.(@lang==LanguageManager.getInstance().currentLanguage)[0];
						}
						else
						rg.label = x.@label;
						rg.reportXML = x;
						
						if(x.attribute("horizontalScrollPolicy").length() > 0)
						{
							rg.table.horizontalScrollPolicy = x.@horizontalScrollPolicy;
						}
						if(x.attribute("lockedColumnCount").length() > 0)
						{
							rg.table.lockedColumnCount = x.@lockedColumnCount;
						}
						if (this.hasOwnProperty("filtersInfo"))
							Bind.addBinding(rg,"filtersInfo",this,"filtersInfo");
							//rg.filtersInfo = this["filtersInfo"];
						this.addChild(rg);
					}
					if (configuration[configurationName].length() > 0 && configuration[configurationName].@showFiltersInfo.length() > 0)
					{
						var showFiltersInfo:Boolean = Tools.parseBoolean(configuration[configurationName].@showFiltersInfo);
						for (var i:int = 0; i < this.getChildren().length; i++)
						{
							if (this.getChildAt(i) is ReportBase)
							{
								(this.getChildAt(i) as ReportBase).showFiltersInfo = showFiltersInfo;
							}
						}
					}
					if (configuration[configurationName].length() > 0 && configuration[configurationName].filterSettings.length() > 0)
					{
						for each (var filterXml:XML in configuration[configurationName].filterSettings.filter)
						{
							var control:DisplayObject;
							
							// dla filtrow niedynamicznych:
							if (filtersComponent.hasOwnProperty(filterXml.@id.toString()))
							{
								control = filtersComponent[filterXml.@id];
								setFilterValue(control,filterXml);
							}
							
							// dla filtrow dynamicznych:
							var customFilters:Array = (filtersComponent as IReportFiltersComponent).customFilters;
							for (var j:int = 0; j < customFilters.length; j++)
							{
								var filter:DisplayObject = customFilters[j];
								if (filter["config"].@id.length() > 0 && filter["config"].@id.toString() == filterXml.@id.toString())
								{
									control = filter;
									setFilterValue(control,filterXml);
									break;
								}
							}
							
							if (!control)
							{
								ConfigManager.reportConfigurationError("Błąd w konfiguracji pod kluczem reports.definition.\n Filtr " + filterXml.@id.toString() + " nie istnieje w zestawieniu " + reportsName,"Błąd konfiguracji");
							}
						}
						
						function setFilterValue(filterControl:DisplayObject,filterXml:XML):void
						{
							var control:DisplayObject = filterControl;
							try 
							{
								if (control.hasOwnProperty(filterXml.@field.toString()))
								{
									var value:Object = filterXml.@value;
									if (filterXml.value.length() > 0)
										value = filterXml.value.*;
									var type:String = typeof(control[filterXml.@field]);
									switch (type)
									{
										case "boolean" :
											control[filterXml.@field] = Tools.parseBoolean(value);
											break;
										case "int":
										case "number" :
											control[filterXml.@field] = parseFloat(value.toString());
											break;
										default:
											control[filterXml.@field] = value;
									}
								}
								else
								{
									ConfigManager.reportConfigurationError("Błąd w konfiguracji pod kluczem reports.definition.\n Filtr " + filterXml.@id.toString() + " nie posiada wlasciwosci " + filterXml.@field ,"Błąd konfiguracji");
								}
							}
							 catch(e:Error)
							{
								ConfigManager.reportConfigurationError("Błąd w konfiguracji pod kluczem reports.definition.\n Właściwość " + filterXml.@field + " filtra " + filterXml.@id.toString() + " (" + typeof(control[filterXml.@field]) + ") nie obsługuje typu String.","Błąd konfiguracji");
							}
						}
					}
				}
			}
			
			protected function createCustomFilter(filterConfiguration:XML):DisplayObject
			{
				var filter:DisplayObject;
				var filterClass:Class = FilterClassMapper.CLASSES[filterConfiguration.@type];
				if (filterClass) filter = new filterClass();
				if (filter.hasOwnProperty("config")) filter["config"] = filterConfiguration;
				filter.addEventListener(Event.CHANGE,setFiltersInfo);
				return filter;
			}
			
			private function setFiltersInfo(event:Event):void
			{
				var filtersInfo:Object;
				if (filtersComponent && filtersComponent.hasOwnProperty("filtersInfo"))
					filtersInfo = filtersComponent["filtersInfo"];
				if(filtersInfo && event && event.target is IReportFilter)
				{
					var filtersInfoCopy:Object = {};
					for (var name:String in filtersInfo)
					{
						filtersInfoCopy[name] = filtersInfo[name];
					}
					var filter:IReportFilter = (event.target as IReportFilter);
					filtersInfoCopy[event.target.uid] = {label : event.target.label, value : filter.stringValue};
					filtersComponent["filtersInfo"] = filtersInfoCopy;
					filtersComponent.dispatchEvent(new Event("filterInfoChanged"));
				}
			}
			
			protected function changeHandler():void
			{
				if(selectedChild is ReportBase){
					if((filtersComponent as IReportFiltersComponent).errors.length > 0){
						Alert.show((filtersComponent as IReportFiltersComponent).errors.join("\n"),LanguageManager.getLabel("alert.alert"),4,null,alertCloseHandler);
						(selectedChild as ReportBase).dataProvider = new XMLList();
					}else{
						if (defaultSearchParams)(selectedChild as ReportBase).generateReport(defaultSearchParams);
						else throw new Error("No default search parameters XML specified.");
					}
				}
			}
			
			private function alertCloseHandler(event:CloseEvent):void{
				this.selectedIndex = 0;
			}
			
		]]>
	</mx:Script>
</mx:TabNavigator>
