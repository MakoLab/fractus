<?xml version="1.0" encoding="utf-8"?>
<DocumentEditor
		xmlns="com.makolab.fractus.view.documents.documentEditors.*"
		xmlns:lineList="com.makolab.components.lineList.*"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:util="com.makolab.components.util.*"
		xmlns:inputComponents="com.makolab.components.inputComponents.*"
		xmlns:model="com.makolab.fractus.model.*" xmlns:catalogue="com.makolab.components.catalogue.*"
		xmlns:documentControls="com.makolab.fractus.view.documents.documentControls.*" xmlns:plugins="com.makolab.fractus.view.documents.plugins.*"
		printProfileName="defaultCommercialDocumentPdf"
		creationComplete="creationComplete()"
	>
	<mx:Script>
		<![CDATA[
			import com.makolab.components.document.DocumentEvent;
			import com.makolab.components.util.CurrencyManager;
			import com.makolab.fractus.commands.LoadBusinessObjectCommand;
			import com.makolab.fractus.commands.SaveBusinessObjectCommand;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.model.document.DocumentObject;
			import com.makolab.fractus.view.documents.documentControls.DefaultAttributeComponent;
			import com.makolab.fractus.view.documents.documentControls.DocumentBarcodeVerificationComponent;
			import com.makolab.fractus.view.documents.plugins.CommercialDocumentCalculationPlugin;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			private function creationComplete():void
			{
				if(documentObject.typeDescriptor.xmlOptions.additionalAttributes.*.length() == 0)
				{
					this.tabNavigator.getTabAt(2).visible = false;
					this.tabNavigator.getTabAt(2).includeInLayout = false;
				}
				
				if(documentObject.typeDescriptor.xmlOptions.issueOptions.*.length() == 0)
				{
					this.tabNavigator.getTabAt(3).visible = false;
					this.tabNavigator.getTabAt(3).includeInLayout = false;
				}
				ModelLocator.getInstance().configManager.requestList(["system.barcodeVerification"],configurationLoaded);
				documentObject.addEventListener(DocumentEvent.DOCUMENT_PAYMENT_CHANGE,function ():void{showPaymentComponent(documentObject)});
				
				tabNavigator.setFocus();
			}
			
			private function configurationLoaded():void
			{
				barcodeVerification = ModelLocator.getInstance().configManager.getBoolean("system.barcodeVerification");
			}
			
			[Bindable] private var barcodeVerification:Boolean;
			[Bindable] private var showPayments:Boolean = true;
			
			private var singleIdArray:ArrayCollection = new ArrayCollection();
			private function updateSalesPrice():void
			{
				for each(var i:Object in documentObject.lines){
					if(i.itemId!=null){

						var obj:Object = findInCollection(singleIdArray, findId(i.itemId));
						if(obj != null)
							obj.price = i.initialNetPrice;
						else singleIdArray.addItem({id:i.itemId, price: i.initialNetPrice});
						
					}
				}
				for each(var j:Object in singleIdArray){
						var cmd:LoadBusinessObjectCommand = new LoadBusinessObjectCommand();
							cmd.addEventListener(ResultEvent.RESULT, itemLoadResultHandler);
							cmd.execute( { id : j.id, type : 'Item' } );
				}
			}
			
			private function itemLoadResultHandler(event:ResultEvent):void
			{
				var result:XML = XML(event.result);
				for each(var i:Object in singleIdArray){
					if(i.id==result.item.id){
						result.item.defaultPrice = i.price;
					}
				}
				var cmd:SaveBusinessObjectCommand = new SaveBusinessObjectCommand();
					cmd.execute(result);
			}
			
			private function findId(id:String):Function { 
			  return function( element : *, index : int, array : Array ) : Boolean 
			  { 
			    return element.id == id; 
			  } 
			} 
			private function findInCollection(c:ArrayCollection, find:Function):Object { 
			  var matches : Array = c.source.filter( find ); 
			  return ( matches.length > 0 ? matches[0] : null ); 
			}
			
			private function verifyByCode():void
			{
				DocumentBarcodeVerificationComponent.showWindow(documentObject).addEventListener(FlexEvent.HIDE, verificationComponentHide);
			}
			
			private function verificationComponentHide(event:FlexEvent):void
			{
				this.window.setFocus();
			}
			
			override protected function handleKeyDown(event:KeyboardEvent):void
			{
				// Przejscie do konkretnej zakadki
				if (event.ctrlKey && !event.altKey && !event.shiftKey && event.keyCode >= 49 && event.keyCode <= 57)
				{
					if (event.keyCode - 49 < tabNavigator.numChildren && tabNavigator.getTabAt(event.keyCode - 49).visible)
					{
						tabNavigator.selectedIndex = event.keyCode - 49;
						tabNavigator.setFocus();
					}
				}
				super.handleKeyDown(event);
			}
			
			[Bindable]
			override public function set documentObject(value:DocumentObject):void
			{
				if (value) showPaymentComponent(value);
				super.documentObject = value;
			}
			
			private function showPaymentComponent(documentObject:DocumentObject):void
			{
				if (documentObject && documentObject.paymentsXML)
				{
					var foreignCurrencyPayments:Boolean;
					for each(var payment:XML in documentObject.paymentsXML.payment)
					{
						if (payment.paymentCurrencyId.toString() != ModelLocator.getInstance().systemCurrencyId) 
						{
							foreignCurrencyPayments = true;
							break;
						}
					}
					if (foreignCurrencyPayments)
					{
						showPayments = false;
						showPayments = false;
					}else{
						showPayments = true;
						showPayments = true;
					}
				}
			}
		]]>
	</mx:Script>
	
	<!-- plugins -->
	<plugins:DocumentValidationPlugin id="validationPlugin" documentObject="{documentObject}"/>
	<plugins:CommercialDocumentCalculationPlugin documentObject="{documentObject}" calculationLogic="{CommercialDocumentCalculationPlugin.CALCULATION_LOGIC_PURCHASE}"/>
	<plugins:ContractorPlugin documentObject="{documentObject}"/>
	<plugins:DocumentNumberPlugin documentObject="{documentObject}"/>
	<plugins:WarehouseDocumentAlocationsPlugin documentObject="{documentObject}"/>
	<plugins:PaymentCalculationPlugin documentObject="{documentObject}"/>
	
	<mx:TabNavigator id="tabNavigator" width="100%" height="100%" historyManagementEnabled="false" backgroundAlpha="0.9" backgroundColor="white">

		<mx:Form
				label="{LanguageManager.getInstance().labels.common.basicTab}"
				paddingLeft="15"
				paddingRight="15"
				width="100%"
				height="100%"
				paddingTop="0"
				paddingBottom="0"
			>
	
			<!-- numer -->
			<mx:HBox>
				<mx:Label text="{getDocumentType(documentObject.xml).label.@lang.length()?getDocumentType(documentObject.xml).label.(@lang==LanguageManager.getInstance().currentLanguage)[0]:getDocumentType(documentObject.xml).label}" fontSize="18"/>
				<documentControls:DocumentNumberComponent id="documentNumberComponent" documentObject="{documentObject}"/>
			</mx:HBox>
			
			<!-- nabywca -->
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.contractorData}" width="100%">
				<mx:HBox width="100%">
					<documentControls:ContractorComponent
							id="contractorComponent"
							currentState="editor"
							width="40%"
							documentObject="{documentObject}"
							contractorId="{documentObject.xml.contractor.contractor.id}"
							enableAddressSelection="{documentObject.enableAddressSelection}"
						/>
					<!-- dane nabywcy -->
					<documentControls:ContractorDataComponent
							width="60%"
							documentObject="{documentObject}"
						/>
				</mx:HBox>
			</mx:FormItem>
				
			
			<!-- lista pozycji dokumentu -->
			<documentControls:PurchaseLinesComponent
					id="lines"
					width="100%"
					documentObject="{documentObject}"
					rowCount="10"
					enableExpirationDate="{documentObject.typeDescriptor.getEnableExpirationDate()=='false'?false:true}"
				/>
			
			<!-- platnosci -->
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.payments}" id="paymentsComponent" visible="{showPayments}" includeInLayout="{showPayments}">
				<mx:HBox width="100%" horizontalGap="20">
					<!--<documentControls:SimplePaymentControl id="spc" documentObject="{documentObject}" width="70%" editMode="1"/>-->
					<inputComponents:PaymentSimpleEditor2 documentObject="{documentObject}" width="100%"/>
					<!--<documentControls:ChangeCalc documentObject="{documentObject}" width="30%"/>-->
				</mx:HBox>
			</mx:FormItem>
			
			<!-- uaktualnienie cen sprzedaży-->
			<!--<mx:FormItem label="{LanguageManager.getInstance().labels.documents.updateSalesPrice}" visible="{ModelLocator.getInstance().permissionManager.isEnabled('catalogue.items.edit')}">
				<mx:Button label="{LanguageManager.getInstance().labels.documents.update}" toolTip="{LanguageManager.getInstance().labels.documents.updateSalesPriceTooltip}" click="{updateSalesPrice();}" />
			</mx:FormItem>-->

			<!-- weryfikacja faktury czytnikiem kodów-->
			<mx:FormItem label="{LanguageManager.getInstance().labels.documents.verifyPurchaseDocument}" visible="{barcodeVerification}" includeInLayout="{barcodeVerification}">
				<mx:Button label="{LanguageManager.getInstance().labels.documents.verify}" toolTip="{LanguageManager.getInstance().labels.documents.verifyDocumentTooltip}" click="{verifyByCode();}" />
			</mx:FormItem>
			
		</mx:Form>
		
		
		<!-- ZAKLADKA SZCZEGOLOW -->
		<mx:HBox
				label="{LanguageManager.getInstance().labels.documents.details}"
				paddingLeft="15"
				paddingRight="15"
				paddingTop="15"
				width="100%"		
				height="100%"
			>
			
			<!-- lewa kolumna szczegolow -->
			<mx:Form
					width="35%"
					height="100%"
					paddingTop="4"
				>
				<!-- waluta dokumentu -->
				<documentControls:DocumentCurrencySelector documentObject="{documentObject}" width="100%" visible="{documentObject.typeDescriptor.allowOtherCurrencies}" includeInLayout="{documentObject.typeDescriptor.allowOtherCurrencies}"/>
				<!-- miejsce wystawienia -->
				<documentControls:IssuePlaceComponent documentObject="{documentObject}"/>

				<!-- daty -->		
				<documentControls:DateControl documentObject="{documentObject}" fieldName="issueDate" currentState="editor"/>
				<documentControls:DateControl documentObject="{documentObject}" fieldName="eventDate" currentState="editor"/>

				<!-- cechy dokumentu -->
				<documentControls:DocumentFeatureComponent documentObject="{this.documentObject}" currentState="editor" />
				
				<!-- netto/brutto -->
				<documentControls:CalculationTypeComponent documentObject="{documentObject}"/>
				
				<!-- osoba odbierajaca -->
				<documentControls:ReceivingPersonComponent documentObject="{documentObject}" currentState="editor" />
		
				<!-- atrybuty podstawowe -->
				<mx:Repeater id="basicAttributeRepeater" dataProvider="{documentObject.typeDescriptor.xmlOptions.basicAttributes.attribute}">
					<documentControls:DocumentGenericSingleAttributeComponent documentObject="{documentObject}" attributeName="{basicAttributeRepeater.currentItem.@name}" enabled="{basicAttributeRepeater.currentItem.@readOnly != 1}"/>
				</mx:Repeater>
			</mx:Form>
			
			<!-- prawa (szersza) kolumna -->
			<mx:Form
					width="65%"
					height="100%"
					paddingTop="4"
				>
				<!-- uwagi -->
				<documentControls:RemarksComponent documentObject="{documentObject}" width="100%" height="100"/>
				
				<!-- tabela VAT -->
				<mx:FormItem label="{LanguageManager.getInstance().labels.common.tableVat}" width="100%">
					<documentControls:VatTableComponent id="vatTable" documentObject="{documentObject}" width="100%"/>
				</mx:FormItem>
				
				<!-- płatności -->
				<inputComponents:PaymentEditor2 documentObject="{documentObject}" width="100%"/>
			</mx:Form>
		</mx:HBox>
		
		<documentControls:AdditionalAttributesTab documentObject="{documentObject}"/>
		
		<mx:VBox label="{LanguageManager.getInstance().labels.common.options}"
				paddingLeft="15"
				paddingRight="15"
				paddingTop="15"
				paddingBottom="15"
				width="100%"
				left="20"
				right="20"
				top="20"
				bottom="20"
				verticalGap="0"
			>		
			<!-- opcje -->
			<documentControls:DocumentOptionsControl documentObject="{documentObject}" width="100%"/>
		</mx:VBox>
		
	</mx:TabNavigator>
</DocumentEditor>