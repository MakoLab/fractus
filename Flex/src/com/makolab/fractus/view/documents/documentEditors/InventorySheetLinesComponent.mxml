<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:lineList="com.makolab.components.lineList.*" xmlns:catalogue1="com.makolab.fractus.view.catalogue.*" xmlns:catalogue="com.makolab.components.catalogue.*" xmlns:inputComponents="com.makolab.components.inputComponents.*"
		creationComplete="init()" minHeight="100"
		>

	<lineList:LineList
		click="changeHandler(event)"
		id="documentLines"
		draggableColumns="false"
		sortableColumns="{sortableColumns}"
		width="100%"
		editable="true"
		rowColorFunction="{rowColorFunction}"
		selectable="false" 
		dataProvider="{dataProvider}" 
		height="{this.height}" minHeight="100"
		autoHeight="false"
		>
	<lineList:columns>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.lp}" sortable="false" minWidth="20" width="30" editable="false" itemRenderer="com.makolab.components.inputComponents.OrdinalNumberRenderer"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.documents.status}" dataField="direction" editable="false" width="50">	
			<mx:itemRenderer>
				<mx:Component>
					<mx:Image source="{data.directionSymbol}" scaleContent="false" verticalAlign="middle" horizontalAlign="center" width="50"/>
				</mx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.shortName}" minWidth="150" dataField="itemName" editable="false" sortCompareFunction="valueSortCompareFunc"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.quantity}" width="70" dataField="systemQuantity" editable="false" itemRenderer="com.makolab.components.inputComponents.CurrencyRenderer"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.jm}" width="30" dataField="unitId" editable="false" itemRenderer="com.makolab.fractus.view.generic.FractusDictionaryRenderer" />
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.common.realQuantity}" width="100" dataField="userQuantity" itemRenderer="com.makolab.components.inputComponents.CurrencyRenderer" editorDataField="dataObject" id="quantityEditor">
			<mx:itemEditor>
				<mx:Component>
					<inputComponents:CurrencyEditor enabled="{data.direction==1}" change="outerDocument.handleQuantityChange(event, data)"/>
				</mx:Component>
			</mx:itemEditor>
		</mx:DataGridColumn>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.inventory.difference}" editable="false" labelFunction="differenceQuantityFunction" width="55" textAlign="right"/>
		<mx:DataGridColumn headerText="{(committedInventoryStatus) ? LanguageManager.getInstance().labels.inventory.differenceValue : LanguageManager.getInstance().labels.inventory.forecastedDifferenceValue}" editable="false" labelFunction="differenceValueFunction" width="{(committedInventoryStatus) ? 110 : 170}" textAlign="right"/>
		<mx:DataGridColumn headerText="{LanguageManager.getInstance().labels.inventory.userDate}" width="80" dataField="userDate" editable="false" itemRenderer="com.makolab.components.inputComponents.DateRenderer"/>
		<mx:DataGridColumn minWidth="70" width="70" editable="false" visible="{visibleOptionsColumn}">
			<mx:itemRenderer>
				<mx:Component>
					<lineList:LineImageButtonsContainer>
						<lineList:LineImageButton iconsName="status_canceled" clickFunction="{outerDocument.cancelLine}" data="{this.data}" enabled="{outerDocument.cancelLineEnabled(this.data)}" toolTip="{outerDocument.languageManager.labels.common.cancel}"/>
						<lineList:LineImageButton iconsName="delete_small" clickFunction="{outerDocument.deleteLine}" data="{this.data}" enabled="{outerDocument.deleteLineEnabled(this.data)}" toolTip="{outerDocument.languageManager.labels.common.Delete}"/>
					</lineList:LineImageButtonsContainer>	
				</mx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
	</lineList:columns>
</lineList:LineList>

	<mx:Script>
		<![CDATA[
			import com.makolab.components.util.Tools;
			import com.makolab.fractus.model.document.InventorySheetLine;
			import com.makolab.fractus.view.documents.documentEditors.DocumentEditor;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			import com.makolab.fractus.commands.GetItemsDetailsCommand;
			import com.makolab.components.inputComponents.FloatRenderer;
			import com.makolab.components.inputComponents.CurrencyEditor;
			import mx.validators.ValidationResult;
			import mx.events.ValidationResultEvent;
			import com.makolab.fractus.view.documents.plugins.DocumentValidationPlugin;
			import com.makolab.fractus.model.document.WarehouseDocumentLine;
			import com.makolab.fractus.model.document.BusinessObject;
			import mx.rpc.events.ResultEvent;
			import com.makolab.fractus.commands.LoadBusinessObjectCommand;
			import com.makolab.fractus.view.documents.DocumentLineDetails;
			import com.makolab.components.document.DocumentEvent;
			import mx.core.EventPriority;
			import com.makolab.components.inputComponents.CurrencyRenderer;
			import mx.events.DataGridEventReason;
			import mx.events.DataGridEvent;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.components.lineList.LineOperation;
			import com.makolab.fractus.model.document.CommercialDocumentLine;
			import com.makolab.components.lineList.LineOperationEvent;
			import com.makolab.fractus.model.document.DocumentObject;
			import mx.controls.Alert;
			import com.makolab.fractus.view.ComponentWindow;
			import com.makolab.fractus.model.document.InventorySheet;
			import com.makolab.fractus.commands.GetStockList;
			import mx.collections.ArrayCollection;
			import mx.utils.ObjectUtil;
			import com.makolab.components.util.CurrencyManager;
			import mx.controls.dataGridClasses.DataGridColumn;
			import assets.IconManager;
			import com.makolab.fractus.model.LanguageManager;
			
			[Bindable]
			public var sortableColumns:Boolean;
			
			[Bindable]
			private var _dataProvider:Object;
			
			[Bindable]
			public var visibleOptionsColumn:Boolean = true;
			
			[Bindable]
			public var committedInventoryStatus:Boolean = true;;
			
			[Bindable]
			public var languageManager:LanguageManager = LanguageManager.getInstance();
			
			public function getIcon(name:String):Class
			{
				return IconManager.getIcon(name);
			}
			
			private function changeHandler(event:*):void {
				trace(event);
			}
			
			private function differenceValueFunction(item:Object,column:DataGridColumn):String {
				var result:String = "";
				
				if(item.systemQuantity == 0 && !item.deliveries) {
					result = CurrencyManager.formatCurrency(((Math.abs(item.userQuantity - item.systemQuantity)) * item.lastPurchaseNetPrice),"?",null,2);
				} else if(!isNaN(item.userQuantity) && item.deliveries) {
					var m:Number = item.userQuantity - item.systemQuantity;
					var qty:int = Math.abs(m);
					var total:Number = 0;
					var n:int = item.deliveries.length();
					if(m > 0) {
						total = m * item.lastPurchaseNetPrice;
					} else if (m < 0) {
						for(var i:int = 0; i < n; i++) {
							if(qty == 0) {
								break;
							} else if (Number(item.deliveries[i].@quantity <= qty)) {
								total += Number(item.deliveries[i].@quantity) * Number(item.deliveries[i].@price);
								qty -= Number(item.deliveries[i].@quantity);
							} else {
								total += qty * Number(item.deliveries[i].@price);
								qty = 0;
								break;
							}
						}
					}
					result = CurrencyManager.formatCurrency(total,"?",null,2);
				} else {
					result = CurrencyManager.formatCurrency(item.value,"?",null,2);
				}
				
				return result;
			}
			
			private function differenceQuantityFunction(item:Object,column:DataGridColumn):String
			{
				var result:String = "";
				var quantity:Number = Number(item.systemQuantity);
				var realQuantity:Number = Number(item.userQuantity);
				result = CurrencyManager.formatCurrency(quantity - realQuantity,"?",null,-4);
				return result;
			}
			
			private function valueSortCompareFunc(itemA:Object, itemB:Object):int {
                return Tools.sortComparePL(itemA.itemName, itemB.itemName);
            }
			
			[Bindable]
			public function set dataProvider(value:Object):void
			{	
				_dataProvider = value;
				_dataProvider.addEventListener(DocumentEvent.DOCUMENT_LINE_SET_ITEM, handleSetItem, false, EventPriority.DEFAULT_HANDLER, true);
				_dataProvider.addEventListener(DocumentEvent.DOCUMENT_LINE_ATTRIBUTE_CHANGE, handleAttributeChange, false, EventPriority.DEFAULT, true);	
			}
			public function get dataProvider():Object { return _dataProvider; }
			
			[Bindable]
			public var dictionaryManager:DictionaryManager = DictionaryManager.getInstance();
			
			public function fillCountedQuantities():void
			{
				for each (var line:Object in dataProvider)
				{
					if (isNaN(line["userQuantity"]) && !isNaN(line["systemQuantity"])) line["userQuantity"] = line["systemQuantity"];
					handleQuantityChange(null,line);
				}
			}
			
			public function handleAttributeChange(event:DocumentEvent):void
			{
				dataProvider.itemUpdated(event.line);
			}
			
			public function handleQuantityChange(event:Event, data:Object):void
			{
				data.userDate = Tools.dateToIso(new Date());
				dataProvider.itemUpdated(data);
			}
			
			/**
			 * Load and update data of the selected item.
			 */
			public function handleSetItem(event:DocumentEvent):void
			{
				if (event.preventDefault()) return;
				var line:Object = event.line;
	
			}
		
			protected function init():void
			{
				//documentLines.addEventListener(DataGridEvent.ITEM_EDIT_END, itemEditListener, false, EventPriority.DEFAULT_HANDLER + 1);
				documentLines.addEventListener(DataGridEvent.ITEM_EDIT_END, itemEditListener);
			}
			
			public function itemEditListener(event:DataGridEvent):void
			{
				var val:Number = CurrencyRenderer(event.itemRenderer).value;
				if(event.reason == "cancelled" && isNaN(val)){
					dataProvider[event.rowIndex].userDate = null;
					dataProvider.itemUpdated(dataProvider[event.rowIndex]);
				}
			}
			
			/**
			 * Event handler for delete line operation in <code>lineList</code>.
			 * 
			 * @param event Event object containing event data.
			 */
			public function deleteLine(entry:Object):void
			{
				var line:InventorySheetLine = InventorySheetLine(entry);
				documentLines.dataProvider.removeItemAt(documentLines.dataProvider.getItemIndex(line));
				documentLines.dataProvider.dispatchEvent(DocumentEvent.createEvent(DocumentEvent.DOCUMENT_LINE_DELETE, null, line));
			}
		
			public function cancelLine(entry:Object):void
			{
				entry.direction = 0;
			}
			
			public function cancelLineEnabled(entry:Object):Boolean
			{
				if(entry.version!=null && entry.direction == 1) return true;
				else return false;
			}
			
			public function deleteLineEnabled(entry:Object):Boolean
			{
				if(entry.version==null) return true;
				else return false;
			}
			
			protected function rowColorFunction(item:Object):Number
			{
				if (!isNaN(item.userQuantity)&&item.direction==1){ 
					if (item.systemQuantity != item.userQuantity) return 0xfedcdf;//0xd79fa3; 
					else return 0xd0ddf5;//0x9fb2d7;
				}
				else return NaN;
			}
		]]>
	</mx:Script>
	
</mx:VBox>