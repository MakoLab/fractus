<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" dataProvider="{relatedDocuments}" doubleClickEnabled="true" itemDoubleClick="previewRelatedDocument()">
	<mx:columns>
		<mx:DataGridColumn width="70" headerText="Symbol" dataField="@documentTypeId" itemRenderer="com.makolab.fractus.view.generic.DocumentTypeRenderer"/>
		<mx:DataGridColumn width="120" dataField="@fullNumber" headerText="{LanguageManager.getInstance().labels.documents.documentNumber}"/>
		<mx:DataGridColumn labelFunction="getDocType" headerText="{LanguageManager.getInstance().labels.documents.documentType}"/>
		<mx:DataGridColumn width="100" dataField="@issueDate" headerText="{LanguageManager.getInstance().labels.common.date}" itemRenderer="com.makolab.components.inputComponents.DateRenderer"/>
	</mx:columns>
	<mx:Script>
		<![CDATA[
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.view.documents.documentEditors.InventoryDocumentPreview;
			import com.makolab.fractus.commands.GetRelatedDocumentByDocumentRelation;
			import com.makolab.fractus.commands.GetCommercialFinancialRelationsCommand;
			import mx.rpc.events.ResultEvent;
			import com.makolab.fractus.commands.SearchCommand;
			import com.makolab.fractus.commands.GetCorrectiveDocumentsCommand;
			import com.makolab.components.layoutComponents.DataGridImageItemRenderer;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			import com.makolab.fractus.view.generic.FractusDictionaryRenderer;
			import com.makolab.fractus.view.generic.FractusDictionarySelector;
			import com.makolab.fractus.commands.GetRelatedComercialDocumentsCommand;
			import com.makolab.fractus.model.DictionaryManager;
			import com.makolab.fractus.commands.GetRelatedWarehouseDocumentsCommand;
			import com.makolab.fractus.model.LanguageManager;
			
			public const COMMERCIAL_DOCUMENT:String = "commercialDocument";
			public const SERVICE_DOCUMENT:String = "serviceDocument";
			public const WAREHOUSE_DOCUMENT:String = "warehouseDocument";
			public const FINANCIAL_DOCUMENT:String = "financialDocument";
			public const COMPLAINT_DOCUMENT:String = "complaintDocument";
			public const FINANCIAL_REGISTER:String = "register";
			public const INCOME:String = "income";
			public const OUTCOME:String = "outcome";
			public const INCOME_SHIFT:String = "incomeShift";
			public const OUTCOME_SHIFT:String = "outcomeShift";
			public const INVENTORY_DOCUMENT:String = "inventoryDocument";
			
			private var _showDocument:Boolean=true;
			
			public function set showDocument(_sd:Boolean):void
			{
				if(!_sd && !ModelLocator.getInstance().permissionManager.isEnabled("catalogue.items.viewHideItems"))
					_showDocument=false;
				else
					_showDocument=true;
			}
			public function get showDocument():Boolean
			{
				return _showDocument;
			}
			[Bindable]
			public var documentType:String = null;
			
			private var _data:Object = new Object();
			
			private var docType:String = "";
			
			private var _relatedDocuments:Array = [];
			
			[Bindable]
			public function set relatedDocuments(value:Array):void
			{
				_relatedDocuments = value;
			}
			
			public function get relatedDocuments():Array
			{
				return _relatedDocuments;
			}
			
			private var showItem:Boolean=true;
						
			[Bindable]
			override public function set data(value:Object):void
			{
				_data = value;
				
				getRelatedDocuments();
			}
			
			override public function get data():Object
			{
				return _data;
			}
			
			private function getDocType(item:Object,column:Object):String
			{
				return DictionaryManager.getInstance().dictionaries.documentTypes.(id.* == item.@documentTypeId).label.(@lang == LanguageManager.getInstance().currentLanguage);
			}
			
			private function previewRelatedDocument():void
			{
				if(_showDocument)
				{
					var docTypeId:String = this.selectedItem.@documentTypeId;
					var docId:String = this.selectedItem.@id;
					var typeDescriptor:DocumentTypeDescriptor = new DocumentTypeDescriptor(docTypeId);
					if (typeDescriptor.isInventoryDocument) InventoryDocumentPreview.showWindow(docId);
					else DocumentRenderer.showWindow(typeDescriptor.documentCategory, docId);
				}
			}
			
			public function getRelatedDocuments():void
			{
				relatedDocuments = [];
				
				var dictionaryItem:XML = null;
				
				if(data && data.*.documentTypeId.length() > 0)
					dictionaryItem = DictionaryManager.getInstance().dictionaries.documentTypes.(id.* == data.*.documentTypeId.*)[0]; 
				else if(data && data.*.financialRegisterId.length() > 0)
					dictionaryItem = DictionaryManager.getInstance().getById(data.*.financialRegisterId.*);
				else return;
				
				docType = dictionaryItem.xmlOptions.root.*[0].name();
				
				var documentId:String = data[docType].id.toString();
				if(documentId != "" || docType == this.FINANCIAL_REGISTER){
					if(docType == "warehouseDocument"){docType = dictionaryItem.xmlOptions.root[docType].@warehouseDirection};
					var cmdCommercial:GetRelatedComercialDocumentsCommand;
					switch(docType){
						case this.SERVICE_DOCUMENT:
							var cmdService:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.COMMERCIAL_DOCUMENT);
							cmdService.execute(setRelatedResult);	
							break;
						case this.COMMERCIAL_DOCUMENT:
							var cmdWarehouse:GetRelatedComercialDocumentsCommand;
							cmdWarehouse = new GetRelatedComercialDocumentsCommand(documentId,GetRelatedComercialDocumentsCommand.COMMERCIAL_DOCUMENT);
							cmdWarehouse.execute(setRelatedResult);
							var cmdCorrected:GetCorrectiveDocumentsCommand = new GetCorrectiveDocumentsCommand(documentId);
							cmdCorrected.execute(setRelatedResult);
							var cmdFinancial:GetCommercialFinancialRelationsCommand = new GetCommercialFinancialRelationsCommand(documentId, GetCommercialFinancialRelationsCommand.COMMERCIAL_DOCUMENT);
							cmdFinancial.execute(setRelatedResult);		
							var cmdOther:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.COMMERCIAL_DOCUMENT);
							cmdOther.execute(setRelatedResult);					
							break;
						case this.COMPLAINT_DOCUMENT:
							var cmdOtherC:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.COMPLAINT_DOCUMENT);
							cmdOtherC.execute(setRelatedResult);
							break;
						case this.INCOME:
						case this.INCOME_SHIFT:
							var cmdWarehouseIncome:GetRelatedWarehouseDocumentsCommand;
							cmdWarehouseIncome = new GetRelatedWarehouseDocumentsCommand(documentId,GetRelatedWarehouseDocumentsCommand.INCOME_DOCUMENT);
							cmdWarehouseIncome.execute(setRelatedResult);
							cmdCommercial = new GetRelatedComercialDocumentsCommand(documentId,GetRelatedComercialDocumentsCommand.WAREHOUSE_DOCUMENT);
							cmdCommercial.execute(setRelatedResult);				
							var cmdOtherIncome:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.WAREHOUSE_DOCUMENT);
							cmdOtherIncome.execute(setRelatedResult);				
 							break;
						case this.OUTCOME:
						case this.OUTCOME_SHIFT:
							var cmdWarehouseOutcome:GetRelatedWarehouseDocumentsCommand;
							cmdWarehouseOutcome = new GetRelatedWarehouseDocumentsCommand(documentId,GetRelatedWarehouseDocumentsCommand.OUTCOME_DOCUMENT);
							cmdWarehouseOutcome.execute(setRelatedResult);
							cmdCommercial = new GetRelatedComercialDocumentsCommand(documentId,GetRelatedComercialDocumentsCommand.WAREHOUSE_DOCUMENT);
							cmdCommercial.execute(setRelatedResult);
							var cmdOtherOutcome:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.WAREHOUSE_DOCUMENT);
							cmdOtherOutcome.execute(setRelatedResult);				
							break;
						case this.FINANCIAL_REGISTER:
							searchParams.filters.column.(@field == "reportId").* = data.*[0].id.*;
							searchParams.filters.column.(@field == "status").* = DictionaryManager.getInstance().dictionaries.documentStatus.(name.toString() == "Booked").value.* + "," + DictionaryManager.getInstance().dictionaries.documentStatus.(name.toString() == "Committed").value.*;
							var cmd:SearchCommand = new SearchCommand(SearchCommand.DOCUMENTS);
							cmd.searchParams = searchParams;
							cmd.addEventListener(ResultEvent.RESULT,relatedFinancialDocHandler);
							cmd.execute();
							break;
						case this.FINANCIAL_DOCUMENT:
							var cmdFinancialDoc:GetCommercialFinancialRelationsCommand = new GetCommercialFinancialRelationsCommand(documentId, GetCommercialFinancialRelationsCommand.FINANCIAL_DOCUMENT);
							cmdFinancialDoc.execute(setRelatedResult);
							var cmdOther3:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.FINANCIAL_DOCUMENT);
							cmdOther3.execute(setRelatedResult);	
							break;
						case this.INVENTORY_DOCUMENT:
							var cmdInventoryDoc:GetRelatedDocumentByDocumentRelation = new GetRelatedDocumentByDocumentRelation(documentId, GetRelatedDocumentByDocumentRelation.INVENTORY_DOCUMENT);
							cmdInventoryDoc.execute(setRelatedResult);
							break;
					}
				}
			}

			private function relatedFinancialDocHandler(event:ResultEvent):void
			{
				this.setRelatedResult(XML(event.result));
			}
			
			private function setRelatedResult(result:XML):void
			{
				for each(var o:XML in result.*){
					var exists:Boolean = false;
					
					for each(var x:XML in relatedDocuments)
					{
						if(x.@id == o.@id)
						{
							exists = true;
							break;
						}
					}
					
					if(!exists)
						relatedDocuments.push(o);
				};
				relatedDocuments.sortOn("@issueDate");
				this.dataProvider = relatedDocuments;
			}
		]]>
	</mx:Script>
	<mx:XML id="searchParams">
		<searchParams type="FinancialDocument">
			<columns>
				<column field="documentTypeId" column="documentTypeId"/>
				<column field="fullNumber" column="fullNumber"/>
				<column field="issueDate" sortOrder="1"/>
			</columns>
			<filters>
				<column field="status"/>
				<column field="reportId"/>
			</filters>
		</searchParams>
	</mx:XML>
</mx:DataGrid>
