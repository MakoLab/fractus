<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:inputComponents="com.makolab.components.inputComponents.*">
	<mx:DataGrid width="100%" height="100%" dataProvider="{documentXML.lines.line}" editable="true">
		<mx:columns>
			<mx:DataGridColumn headerText="{LanguageManager.getLabel('common.item')}" dataField="itemName" editable="false"/>
			<mx:DataGridColumn headerText="{LanguageManager.getLabel('common.warehouse')}" dataField="warehouseId" editable="false" itemRenderer="com.makolab.fractus.view.generic.FractusDictionaryRenderer" width="80"/>
			<mx:DataGridColumn headerText="{LanguageManager.getLabel('common.quantity')}" dataField="quantity" editable="false" itemRenderer="com.makolab.components.inputComponents.FloatRenderer" width="60"/>
      <mx:DataGridColumn headerText="{LanguageManager.getLabel('dashboard.CurrentStocksTitle')}" dataField="stock" editable="false" itemRenderer="com.makolab.components.inputComponents.FloatRenderer" width="60"/>
			<mx:DataGridColumn headerText="{LanguageManager.getLabel('documents.realizedStatus')}" dataField="usedQuantity" editable="false" itemRenderer="com.makolab.components.inputComponents.FloatRenderer" width="90"/>
			<mx:DataGridColumn headerText="{LanguageManager.getLabel('documents.realization')}" editable="true" dataField="targetQuantity" editorDataField="value" rendererIsEditor="true">
				<mx:itemRenderer>
					<mx:Component>
						<inputComponents:FloatStepper minimum="0" maximum="0" height="20">
							<mx:Script>
								<![CDATA[
									public override function set data(value:Object):void
									{
										super.data = value;
										if (value != null && value is XML && outerDocument.maxQuantities)
										{
											this.maximum = outerDocument.maxQuantities[XML(value).childIndex()];
										}
									}
									public override function get data():Object
									{
										return super.data;
									}
								]]>
							</mx:Script>
						</inputComponents:FloatStepper>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	<mx:RadioButtonGroup id="radioGroup"/>
	<mx:Repeater id="templateRepeater" dataProvider="{documentTypeDescriptor.availableDerivedDocuments}">
		<mx:RadioButton
				paddingLeft="10"
				value="{templateRepeater.currentItem.@name}"
				label="{getTemplate(templateRepeater.currentItem.@name).@label}"
				group="{radioGroup}"
			/>
	</mx:Repeater>
	
	
	<mx:Script>
		<![CDATA[
			import com.makolab.fractus.commands.ShowDocumentEditorCommand;
			import com.makolab.fractus.model.LanguageManager;
			import com.makolab.fractus.model.ModelLocator;
			import com.makolab.fractus.model.document.DocumentTypeDescriptor;
			import com.makolab.fractus.view.ComponentWindow;
			
			import mx.collections.ArrayCollection;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.listClasses.ListData;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			public var maxQuantities:Array;
			
			[Bindable]
			private var documentTypeDescriptor:DocumentTypeDescriptor;
			
			public var window:ComponentWindow;
			
			private var _documentXML:XML;
			[Bindable]
			public function set documentXML(value:XML):void
			{
				_documentXML = value;
				maxQuantities = [];
				if (_documentXML)
				{
					documentTypeDescriptor = new DocumentTypeDescriptor(_documentXML.documentTypeId);
					for each (var line:XML in _documentXML.lines.line)
					{
						var qty:Number = parseFloat(line.quantity), used:Number = 0, max:Number;
						for each (var x:XML in line.commercialWarehouseRelations.commercialWarehouseRelation)
						{
							used += parseFloat(x.quantity);
						}
						max = qty - used;
						line.usedQuantity = used;
						line.targetQuantity = max;
						maxQuantities.push(max);
					}
				}
			}
			public function get documentXML():XML
			{
				return _documentXML;
			}
			
			private function getTemplate(templateName:String):XML
			{
				var templates:XML = ModelLocator.getInstance().documentTemplates;
				return templates.*.template.(@id == templateName)[0];
				
			}
			
			public static function showWindow(documentXML:XML):ComponentWindow
			{
				var editor:DocumentFromOrderComponent = new DocumentFromOrderComponent();
				editor.documentXML = documentXML;
				var title:String = "Realizacja dokumentu rezerwacyjnego " + documentXML.number.fullNumber;
				var window:ComponentWindow = ComponentWindow.showWindow(editor, ComponentWindow.BUTTON_COMMIT | ComponentWindow.BUTTON_CLOSE, new Rectangle(-1, -1, 500, 300), title);
				window.commitFunction = editor.commitFunction;
				window.closeFunction = window.hide;
				editor.window = window;
				return window;
			}
			
			private function commitFunction():void
			{
				if (!radioGroup.selectedValue) return;
				var list:XMLList = new XMLList();
				for each (var line:XML in documentXML.lines.line)
				{
					if (line.targetQuantity > 0) list += <line id={String(line.id)} quantity={String(line.targetQuantity)}/>
				}
				var category:uint;
				var template:XML = getTemplate(String(radioGroup.selectedValue));
				var templateParentName:String = template.parent().localName();
				switch (templateParentName)
				{
					case "warehouseDocument":
						category = DocumentTypeDescriptor.CATEGORY_WAREHOUSE;
						break;
					case "salesDocument":
						category = DocumentTypeDescriptor.CATEGORY_SALES;
						break;
					case "purchaseDocument":
						category = DocumentTypeDescriptor.CATEGORY_PURCHASE;
						break;
				}
				createDocument(documentXML.id, template.@id, list, handleCommandResult, category);
			}
			
			public static function createDocument(documentId:String, templateName:String, lines:XMLList, listener:Function, category:uint):void
			{
				// realizacja rezerwacji
				var editorCmd:ShowDocumentEditorCommand = new ShowDocumentEditorCommand(category);
				editorCmd.template = templateName;
				editorCmd.source = <source type="order" commercialDocumentId={documentId}>{lines}</source>;
				editorCmd.addEventListener(ResultEvent.RESULT, listener);
				editorCmd.execute();
			}
			
			private function handleCommandResult(event:ResultEvent):void
			{
				this.window.hide();
			}
		]]>
	</mx:Script>
</mx:VBox>
